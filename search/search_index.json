{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Workflow Core Workflow Core \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5de5\u4f5c\u6d41\u5f15\u64ce\uff0c\u4ee5 .NET Standard\u4e3a\u76ee\u6807\u6846\u67b6\u3002\u53ef\u4ee5\u6ee1\u8db3\u591a\u4efb\u52a1\u4e0b\u957f\u6d41\u7a0b\u4e00\u822c\u90fd\u9700\u8981\u72b6\u6001\u8ddf\u8e2a\u7684\uff0c\u5b83\u652f\u6301\u63d2\u4ef6\u5316\u7684\u6301\u4e45\u6027\u548c\u5e76\u53d1\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4ee5\u5141\u8bb8\u591a\u8282\u70b9\u96c6\u7fa4\u3002 \u5b89\u88c5 \u5b89\u88c5 Nuget \u5305 \u201cWorkflowCore\u201d \u4f7f\u7528nuget PM> Install-Package WorkflowCore \u4f7f\u7528 .net cli dotnet add package WorkflowCore Fluent API \u4f7f\u7528fluent API\u5b9a\u4e49\u5de5\u4f5c\u6d41 public class MyWorkflow : IWorkflow { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<Task1>() .Then<Task2>() .Then<Task3>; } }","title":"\u7b80\u4ecb"},{"location":"#workflow-core","text":"Workflow Core \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5de5\u4f5c\u6d41\u5f15\u64ce\uff0c\u4ee5 .NET Standard\u4e3a\u76ee\u6807\u6846\u67b6\u3002\u53ef\u4ee5\u6ee1\u8db3\u591a\u4efb\u52a1\u4e0b\u957f\u6d41\u7a0b\u4e00\u822c\u90fd\u9700\u8981\u72b6\u6001\u8ddf\u8e2a\u7684\uff0c\u5b83\u652f\u6301\u63d2\u4ef6\u5316\u7684\u6301\u4e45\u6027\u548c\u5e76\u53d1\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4ee5\u5141\u8bb8\u591a\u8282\u70b9\u96c6\u7fa4\u3002","title":"Workflow Core"},{"location":"#_1","text":"\u5b89\u88c5 Nuget \u5305 \u201cWorkflowCore\u201d \u4f7f\u7528nuget PM> Install-Package WorkflowCore \u4f7f\u7528 .net cli dotnet add package WorkflowCore","title":"\u5b89\u88c5"},{"location":"#fluent-api","text":"\u4f7f\u7528fluent API\u5b9a\u4e49\u5de5\u4f5c\u6d41 public class MyWorkflow : IWorkflow { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<Task1>() .Then<Task2>() .Then<Task3>; } }","title":"Fluent API"},{"location":"ASPNETCore/","text":"\u4f7f\u7528ASP.NET Core \u5982\u4f55\u914d\u7f6e\u4e00\u4e2a ASP.NET Core \u5e94\u7528\u7a0b\u5e8f \u5728startup \u7c7b, \u4f7f\u7528 AddWorkflow \u6269\u5c55\u65b9\u6cd5\u6765\u914d\u7f6e\u5de5\u4f5c\u6d41\u6838\u5fc3\u670d\u52a1, \u7136\u540e\u6ce8\u518c\u4f60\u7684\u5de5\u4f5c\u6d41\u5e76\u5f00\u542f\u5bbf\u4e3b\u3002 public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddWorkflow(cfg => { cfg.UseMongoDB(@\"mongodb://mongo:27017\", \"workflow\"); cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://elastic:9200\")), \"workflows\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseMvc(); var host = app.ApplicationServices.GetService<IWorkflowHost>(); host.RegisterWorkflow<TestWorkflow, MyDataClass>(); host.Start(); } } \u7528\u6cd5 \u73b0\u5728\u53ea\u9700\u5c06\u4f60\u9700\u8981\u7684\u670d\u52a1\u6ce8\u5165\u5230\u4f60\u7684\u63a7\u5236\u5668* IWorkflowController * iworkflowwhost * ISearchIndex * IPersistenceProvider\u4e2d","title":"ASP.NET Core"},{"location":"ASPNETCore/#aspnet-core","text":"","title":"\u4f7f\u7528ASP.NET Core"},{"location":"ASPNETCore/#aspnet-core_1","text":"\u5728startup \u7c7b, \u4f7f\u7528 AddWorkflow \u6269\u5c55\u65b9\u6cd5\u6765\u914d\u7f6e\u5de5\u4f5c\u6d41\u6838\u5fc3\u670d\u52a1, \u7136\u540e\u6ce8\u518c\u4f60\u7684\u5de5\u4f5c\u6d41\u5e76\u5f00\u542f\u5bbf\u4e3b\u3002 public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddWorkflow(cfg => { cfg.UseMongoDB(@\"mongodb://mongo:27017\", \"workflow\"); cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://elastic:9200\")), \"workflows\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseMvc(); var host = app.ApplicationServices.GetService<IWorkflowHost>(); host.RegisterWorkflow<TestWorkflow, MyDataClass>(); host.Start(); } }","title":"\u5982\u4f55\u914d\u7f6e\u4e00\u4e2a ASP.NET Core \u5e94\u7528\u7a0b\u5e8f"},{"location":"ASPNETCore/#_1","text":"\u73b0\u5728\u53ea\u9700\u5c06\u4f60\u9700\u8981\u7684\u670d\u52a1\u6ce8\u5165\u5230\u4f60\u7684\u63a7\u5236\u5668* IWorkflowController * iworkflowwhost * ISearchIndex * IPersistenceProvider\u4e2d","title":"\u7528\u6cd5"},{"location":"Elasticsearch/","text":"Workflow Core\u7684Elasticsear\u63d2\u4ef6 A search index plugin for Workflow Core backed by Elasticsearch, enabling you to index your workflows and search against the data and state of them. \u5b89\u88c5 \u5b89\u88c5NuGet \u5305\"WorkflowCore.Providers.Elasticsearch\" \u4f7f\u7528 Nuget package console PM> Install-Package WorkflowCore.Providers.Elasticsearch \u4f7f\u7528 .NET CLI dotnet add package WorkflowCore.Providers.Elasticsearch \u914d\u7f6e Use the .UseElasticsearch extension method on IServiceCollection when building your service provider using Nest; ... services.AddWorkflow(cfg => { ... cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://localhost:9200\")), \"index_name\"); }); \u7528\u6cd5 Inject the ISearchIndex service into your code and use the Search method. Search(string terms, int skip, int take, params SearchFilter[] filters) terms A whitespace separated string of search terms, an empty string will match everything. This will do a full text search on the following default fields * Reference * Description * Status * Workflow Definition In addition you can search data within your own custom data object if it implements ISearchable using WorkflowCore.Interfaces; public class MyData : ISearchable { public string StrValue1 { get; set; } public string StrValue2 { get; set; } public IEnumerable<string> GetSearchTokens() { return new List<string>() { StrValue1, StrValue2 }; } } \u793a\u4f8b Search all fields for \"puppies\" searchIndex.Search(\"puppies\", 0, 10); skip & take Use skip and take to page your search results. Where skip is the result number to start from and take is the page size. filters You can also supply a list of filters to apply to the search, these can be applied to both the standard fields as well as any field within your custom data objects. There is no need to implement ISearchable on your data object in order to use filters against it. The following filter types are available * ScalarFilter * DateRangeFilter * NumericRangeFilter * StatusFilter These exist in the WorkflowCore.Models.Search namespace. \u793a\u4f8b Filtering by reference ``` using WorkflowCore.Models.Search; ... searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Reference, \"My Reference\")); ``` Filtering by workflows started after a date searchIndex.Search(\"\", 0, 10, DateRangeFilter.After(x => x.CreateTime, startDate)); Filtering by workflows completed within a period searchIndex.Search(\"\", 0, 10, DateRangeFilter.Between(x => x.CompleteTime, startDate, endDate)); Filtering by workflows in a state searchIndex.Search(\"\", 0, 10, StatusFilter.Equals(WorkflowStatus.Complete)); Filtering against your own custom data class ``` class MyData { public string Value1 { get; set; } public int Value2 { get; set; } } searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Value1, \"blue moon\")); searchIndex.Search(\"\", 0, 10, NumericRangeFilter.LessThan(x => x.Value2, 5)) ```","title":"Elasticsearch\u63d2\u4ef6"},{"location":"Elasticsearch/#workflow-coreelasticsear","text":"A search index plugin for Workflow Core backed by Elasticsearch, enabling you to index your workflows and search against the data and state of them.","title":"Workflow Core\u7684Elasticsear\u63d2\u4ef6"},{"location":"Elasticsearch/#_1","text":"\u5b89\u88c5NuGet \u5305\"WorkflowCore.Providers.Elasticsearch\" \u4f7f\u7528 Nuget package console PM> Install-Package WorkflowCore.Providers.Elasticsearch \u4f7f\u7528 .NET CLI dotnet add package WorkflowCore.Providers.Elasticsearch","title":"\u5b89\u88c5"},{"location":"Elasticsearch/#_2","text":"Use the .UseElasticsearch extension method on IServiceCollection when building your service provider using Nest; ... services.AddWorkflow(cfg => { ... cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://localhost:9200\")), \"index_name\"); });","title":"\u914d\u7f6e"},{"location":"Elasticsearch/#_3","text":"Inject the ISearchIndex service into your code and use the Search method. Search(string terms, int skip, int take, params SearchFilter[] filters)","title":"\u7528\u6cd5"},{"location":"Elasticsearch/#terms","text":"A whitespace separated string of search terms, an empty string will match everything. This will do a full text search on the following default fields * Reference * Description * Status * Workflow Definition In addition you can search data within your own custom data object if it implements ISearchable using WorkflowCore.Interfaces; public class MyData : ISearchable { public string StrValue1 { get; set; } public string StrValue2 { get; set; } public IEnumerable<string> GetSearchTokens() { return new List<string>() { StrValue1, StrValue2 }; } }","title":"terms"},{"location":"Elasticsearch/#_4","text":"Search all fields for \"puppies\" searchIndex.Search(\"puppies\", 0, 10);","title":"\u793a\u4f8b"},{"location":"Elasticsearch/#skip-take","text":"Use skip and take to page your search results. Where skip is the result number to start from and take is the page size.","title":"skip &amp; take"},{"location":"Elasticsearch/#filters","text":"You can also supply a list of filters to apply to the search, these can be applied to both the standard fields as well as any field within your custom data objects. There is no need to implement ISearchable on your data object in order to use filters against it. The following filter types are available * ScalarFilter * DateRangeFilter * NumericRangeFilter * StatusFilter These exist in the WorkflowCore.Models.Search namespace.","title":"filters"},{"location":"Elasticsearch/#_5","text":"Filtering by reference ``` using WorkflowCore.Models.Search; ... searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Reference, \"My Reference\")); ``` Filtering by workflows started after a date searchIndex.Search(\"\", 0, 10, DateRangeFilter.After(x => x.CreateTime, startDate)); Filtering by workflows completed within a period searchIndex.Search(\"\", 0, 10, DateRangeFilter.Between(x => x.CompleteTime, startDate, endDate)); Filtering by workflows in a state searchIndex.Search(\"\", 0, 10, StatusFilter.Equals(WorkflowStatus.Complete)); Filtering against your own custom data class ``` class MyData { public string Value1 { get; set; } public int Value2 { get; set; } } searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Value1, \"blue moon\")); searchIndex.Search(\"\", 0, 10, NumericRangeFilter.LessThan(x => x.Value2, 5)) ```","title":"\u793a\u4f8b"},{"location":"Extensions/","text":"\u6269\u5c55 User (human) workflows","title":"\u6269\u5c55"},{"location":"Extensions/#_1","text":"User (human) workflows","title":"\u6269\u5c55"},{"location":"Samples/","text":"\u793a\u4f8b Hello World Passing Data Events Activity Workers Dependency Injection Parallel ForEach While loop If Parallel Tasks Saga Transactions Scheduled Background Tasks Recurring Background Tasks Multiple outcomes Deferred execution & re-entrant steps Looping Exposing a REST API Human(User) Workflow Workflow Middleware","title":"\u793a\u4f8b"},{"location":"Samples/#_1","text":"Hello World Passing Data Events Activity Workers Dependency Injection Parallel ForEach While loop If Parallel Tasks Saga Transactions Scheduled Background Tasks Recurring Background Tasks Multiple outcomes Deferred execution & re-entrant steps Looping Exposing a REST API Human(User) Workflow Workflow Middleware","title":"\u793a\u4f8b"},{"location":"activity-workers/","text":"\u6d3b\u52a8(Activities) \u6d3b\u52a8\u88ab\u5b9a\u4e49\u4e3a\u5de5\u4f5c\u6d41\u53ef\u4ee5\u7b49\u5f85\u7684\u5916\u90e8\u5de5\u4f5c\u961f\u5217\u4e0a\u7684\u9879\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u5728\u7ee7\u7eed\u4e4b\u524d\u7b49\u5f85 activity-1 \u3002 \u5b83\u8fd8\u4f20\u9012 data.Value1 \u7684\u503c\u5230\u6d3b\u52a8\uff0c\u7136\u540e\u5c06\u6d3b\u52a8\u7684\u7ed3\u679c\u6620\u5c04\u5230 data.Value2 \u3002 \u7136\u540e\u6211\u4eec\u521b\u5efa\u4e00\u4e2aworker\u6765\u5904\u7406\u6d3b\u52a8\u9879\u7684\u961f\u5217\u3002 \u5b83\u4f7f\u7528 GetPendingActivity \u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a\u6d3b\u52a8\u548c\u5de5\u4f5c\u6d41\u6b63\u5728\u7b49\u5f85\u7684\u6570\u636e\u3002 public class ActivityWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<HelloWorld>() .Activity(\"activity-1\", (data) => data.Value1) .Output(data => data.Value2, step => step.Result) .Then<PrintMessage>() .Input(step => step.Message, data => data.Value2); } } ... var activity = host.GetPendingActivity(\"activity-1\", \"worker1\", TimeSpan.FromMinutes(1)).Result; if (activity != null) { Console.WriteLine(activity.Parameters); host.SubmitActivitySuccess(activity.Token, \"Some response data\"); } \u8fd9\u4e00\u6b65\u7684JSON\u8868\u793a\u5982\u4e0b\u6240\u793a { \"Id\": \"activity-step\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"Inputs\": { \"ActivityName\": \"\\\"activity-1\\\"\", \"Parameters\": \"data.Value1\" }, \"Outputs\": { \"Value2\": \"step.Result\" } } JSON / YAML API Activity \u6b65\u9aa4\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8f93\u5165\u8fdb\u884c\u914d\u7f6e \u5b57\u6bb5 \u63cf\u8ff0 CancelCondition \u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.ActivityName \u6307\u5b9a\u6d3b\u52a8\u540d\u79f0\u7684\u8868\u8fbe\u5f0f Inputs.Parameters \u6307\u5b9a\u4f20\u9012\u7ed9\u6d3b\u52a8\u5de5\u4f5c\u8005\u7684\u53c2\u6570\u7684\u8868\u8fbe\u5f0f Inputs.EffectiveDate \u6307\u5b9a\u6709\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyActivityStep\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"ActivityName\": \"\\\"my-activity\\\"\", \"Parameters\": \"data.SomeValue\" } } Id: MyActivityStep StepType: WorkflowCore.Primitives.Activity, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: ActivityName: '\"my-activity\"' EventKey: '\"Key1\"' Parameters: data.SomeValue","title":"\u6d3b\u52a8\u5de5\u4f5c\u8005"},{"location":"activity-workers/#activities","text":"\u6d3b\u52a8\u88ab\u5b9a\u4e49\u4e3a\u5de5\u4f5c\u6d41\u53ef\u4ee5\u7b49\u5f85\u7684\u5916\u90e8\u5de5\u4f5c\u961f\u5217\u4e0a\u7684\u9879\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u5728\u7ee7\u7eed\u4e4b\u524d\u7b49\u5f85 activity-1 \u3002 \u5b83\u8fd8\u4f20\u9012 data.Value1 \u7684\u503c\u5230\u6d3b\u52a8\uff0c\u7136\u540e\u5c06\u6d3b\u52a8\u7684\u7ed3\u679c\u6620\u5c04\u5230 data.Value2 \u3002 \u7136\u540e\u6211\u4eec\u521b\u5efa\u4e00\u4e2aworker\u6765\u5904\u7406\u6d3b\u52a8\u9879\u7684\u961f\u5217\u3002 \u5b83\u4f7f\u7528 GetPendingActivity \u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a\u6d3b\u52a8\u548c\u5de5\u4f5c\u6d41\u6b63\u5728\u7b49\u5f85\u7684\u6570\u636e\u3002 public class ActivityWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<HelloWorld>() .Activity(\"activity-1\", (data) => data.Value1) .Output(data => data.Value2, step => step.Result) .Then<PrintMessage>() .Input(step => step.Message, data => data.Value2); } } ... var activity = host.GetPendingActivity(\"activity-1\", \"worker1\", TimeSpan.FromMinutes(1)).Result; if (activity != null) { Console.WriteLine(activity.Parameters); host.SubmitActivitySuccess(activity.Token, \"Some response data\"); } \u8fd9\u4e00\u6b65\u7684JSON\u8868\u793a\u5982\u4e0b\u6240\u793a { \"Id\": \"activity-step\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"Inputs\": { \"ActivityName\": \"\\\"activity-1\\\"\", \"Parameters\": \"data.Value1\" }, \"Outputs\": { \"Value2\": \"step.Result\" } }","title":"\u6d3b\u52a8(Activities)"},{"location":"activity-workers/#json-yaml-api","text":"Activity \u6b65\u9aa4\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8f93\u5165\u8fdb\u884c\u914d\u7f6e \u5b57\u6bb5 \u63cf\u8ff0 CancelCondition \u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.ActivityName \u6307\u5b9a\u6d3b\u52a8\u540d\u79f0\u7684\u8868\u8fbe\u5f0f Inputs.Parameters \u6307\u5b9a\u4f20\u9012\u7ed9\u6d3b\u52a8\u5de5\u4f5c\u8005\u7684\u53c2\u6570\u7684\u8868\u8fbe\u5f0f Inputs.EffectiveDate \u6307\u5b9a\u6709\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyActivityStep\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"ActivityName\": \"\\\"my-activity\\\"\", \"Parameters\": \"data.SomeValue\" } } Id: MyActivityStep StepType: WorkflowCore.Primitives.Activity, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: ActivityName: '\"my-activity\"' EventKey: '\"Key1\"' Parameters: data.SomeValue","title":"JSON / YAML API"},{"location":"control-structures/","text":"\u63a7\u5236\u7ed3\u6784(Control Structures) \u51b3\u7b56\u5206\u652f(Decision Branches) \u60a8\u53ef\u4ee5\u5728\u5de5\u4f5c\u6d41\u4e2d\u5b9a\u4e49\u591a\u4e2a\u72ec\u7acb\u5206\u652f\uff0c\u5e76\u6839\u636e\u8868\u8fbe\u5f0f\u503c\u9009\u62e9\u4e00\u4e2a\u3002 Fluent API \u5bf9\u4e8eFluent API\uff0c\u6211\u4eec\u4f7f\u7528\u5de5\u4f5c\u6d41\u6784\u5efa\u5668\u4e0a\u7684 CreateBranch() \u65b9\u6cd5\u5b9a\u4e49\u5206\u652f\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Branch \u65b9\u6cd5\u9009\u62e9\u4e00\u4e2a\u5206\u652f\u3002 \u9009\u62e9\u8868\u8fbe\u5f0f\u5c06\u901a\u8fc7 Branch \u65b9\u6cd5\u4e0e\u5217\u51fa\u7684\u5206\u652f\u5339\u914d\uff0c\u5339\u914d\u7684\u4e0b\u4e00\u6b65\u5c06\u88ab\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002 \u5339\u914d\u591a\u4e2a\u4e0b\u4e00\u6b65\u5c06\u5bfc\u81f4\u5e76\u884c\u5206\u652f\u8fd0\u884c\u3002 \u8fd9\u4e2a\u5de5\u4f5c\u6d41\u5982\u679c data.Value1 \u503c\u662f1\uff0c\u5c06\u9009\u62e9 branch1 ,\u5982\u679c\u662f2\u5219\u662f branch2 \u3002 var branch1 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 1\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 1\"); var branch2 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 2\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 2\"); builder .StartWith<HelloWorld>() .Decide(data => data.Value1) .Branch((data, outcome) => data.Value1 == \"one\", branch1) .Branch((data, outcome) => data.Value1 == \"two\", branch2); JSON / YAML API \u901a\u8fc7 SelectNextStep \u5c5e\u6027\u6765\u8fde\u63a5\u5206\u652f\uff0c\u800c\u4e0d\u662f NextStepId \u3002 \u8868\u8fbe\u5f0f\u5c06\u4e0e SelectNextStep \u4e2d\u5217\u51fa\u7684\u6b65\u9aa4id\u5339\u914d\uff0c\u5339\u914d\u7684\u4e0b\u4e00\u6b65\u5c06\u88ab\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002 { \"Id\": \"DecisionWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyData, MyApp\", \"Steps\": [ { \"Id\": \"decide\", \"StepType\": \"...\", \"SelectNextStep\": { \"Branch1\": \"<<result expression to match for branch 1>>\", \"Branch2\": \"<<result expression to match for branch 2>>\" } }, { \"Id\": \"Branch1\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 1\\\"\" } }, { \"Id\": \"Branch2\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 2\\\"\" } } ] } Id: DecisionWorkflow Version: 1 DataType: MyApp.MyData, MyApp Steps: - Id: decide StepType: WorkflowCore.Primitives.Decide, WorkflowCore Inputs: Expression: <<input expression to evaluate>> OutcomeSteps: Branch1: '<<result expression to match for branch 1>>' Branch2: '<<result expression to match for branch 2>>' - Id: Branch1 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 1\"' - Id: Branch2 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 2\"' \u5e76\u884cForEach Fluent API public class ForEachWorkflow : IWorkflow { public string Id => \"Foreach\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<SayHello>() .ForEach(data => new List<int>() { 1, 2, 3, 4 }) .Do(x => x .StartWith<DisplayContext>() .Input(step => step.Message, (data, context) => context.Item) .Then<DoSomething>()) .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyForEachStep\", \"StepType\": \"WorkflowCore.Primitives.ForEach, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Collection\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyForEachStep StepType: WorkflowCore.Primitives.ForEach, WorkflowCore NextStepId: \"...\" Inputs: Collection: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u200b While \u5faa\u73af \u4f7f\u7528 .While \u65b9\u6cd5\u542f\u52a8while\u6784\u9020 Fluent API public class WhileWorkflow : IWorkflow<MyData> { public string Id => \"While\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .While(data => data.Counter < 3) .Do(x => x .StartWith<DoSomething>() .Then<IncrementStep>() .Input(step => step.Value1, data => data.Counter) .Output(data => data.Counter, step => step.Value2)) .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyWhileStep\", \"StepType\": \"WorkflowCore.Primitives.While, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyWhileStep StepType: WorkflowCore.Primitives.While, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u200b If \u6761\u4ef6 \u4f7f\u7528 .If \u65b9\u6cd5\u5f00\u59cb\u4e00\u4e2aIf\u6761\u4ef6 Fluent API public class IfWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .If(data => data.Counter < 3).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 3\") ) .If(data => data.Counter < 5).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 5\") ) .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyIfStep\", \"StepType\": \"WorkflowCore.Primitives.If, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyIfStep StepType: WorkflowCore.Primitives.If, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp Parallel\u8def\u5f84 \u4f7f\u7528 .Parallel() \u65b9\u6cd5\u6765\u5206\u652f\u5e76\u884c\u4efb\u52a1 Fluent API public class ParallelWorkflow : IWorkflow<MyData> { public string Id => \"parallel-sample\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .Parallel() .Do(then => then.StartWith<Task1dot1>() .Then<Task1dot2>() .Do(then => then.StartWith<Task2dot1>() .Then<Task2dot2>() .Do(then => then.StartWith<Task3dot1>() .Then<Task3dot2>() .Join() .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyParallelStep\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"...\", \"Do\": [ [ { \"Id\": \"Branch1.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch1.Step2\" }, { \"Id\": \"Branch1.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ], [ { \"Id\": \"Branch2.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch2.Step2\" }, { \"Id\": \"Branch2.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ] ] } Id: MyParallelStep StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: \"...\" Do: - - Id: Branch1.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch1.Step2 - Id: Branch1.Step2 StepType: MyApp.DoSomething2, MyApp - - Id: Branch2.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch2.Step2 - Id: Branch2.Step2 StepType: MyApp.DoSomething2, MyApp \u200b \u8ba1\u5212(Schedule) \u4f7f\u7528 .Schedule \u6765\u6ce8\u518c\u672a\u6765\u7684\u4e00\u7ec4\u6b65\u9aa4\uff0c\u4ee5\u4fbf\u5728\u60a8\u7684\u5de5\u4f5c\u6d41\u7684\u540e\u53f0\u5f02\u6b65\u8fd0\u884c\u3002 Fluent API builder .StartWith(context => Console.WriteLine(\"Hello\")) .Schedule(data => TimeSpan.FromSeconds(5)).Do(schedule => schedule .StartWith(context => Console.WriteLine(\"Doing scheduled tasks\")) ) .Then(context => Console.WriteLine(\"Doing normal tasks\")); JSON / YAML API { \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Schedule, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Schedule, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u5ef6\u8fdf(Delay) Delay\u6b65\u9aa4\u5c06\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u6bb5\u5185\u6682\u505c\u5de5\u4f5c\u6d41\u7684\u5f53\u524d\u5206\u652f\u3002 JSON / YAML API { \"Id\": \"MyDelayStep\", \"StepType\": \"WorkflowCore.Primitives.Delay, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Period\": \"<<expression to evaluate>>\" } } Id: MyDelayStep StepType: WorkflowCore.Primitives.Delay, WorkflowCore NextStepId: \"...\" Inputs: Period: \"<<expression to evaluate>>\" \u9012\u5f52(Recur) \u4f7f\u7528 .Recur \u5728\u60a8\u7684\u5de5\u4f5c\u6d41\u4e2d\u8bbe\u7f6e\u4e00\u7ec4\u91cd\u590d\u7684\u540e\u53f0\u6b65\u9aa4\uff0c\u76f4\u5230\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6 Fluent API builder .StartWith(context => Console.WriteLine(\"Hello\")) .Recur(data => TimeSpan.FromSeconds(5), data => data.Counter > 5).Do(recur => recur .StartWith(context => Console.WriteLine(\"Doing recurring task\")) ) .Then(context => Console.WriteLine(\"Carry on\")); JSON / YAML API { \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Recur, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\", \"StopCondition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Recur, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" StopCondition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u200b","title":"\u63a7\u5236\u7ed3\u6784"},{"location":"control-structures/#control-structures","text":"","title":"\u63a7\u5236\u7ed3\u6784(Control Structures)"},{"location":"control-structures/#decision-branches","text":"\u60a8\u53ef\u4ee5\u5728\u5de5\u4f5c\u6d41\u4e2d\u5b9a\u4e49\u591a\u4e2a\u72ec\u7acb\u5206\u652f\uff0c\u5e76\u6839\u636e\u8868\u8fbe\u5f0f\u503c\u9009\u62e9\u4e00\u4e2a\u3002","title":"\u51b3\u7b56\u5206\u652f(Decision Branches)"},{"location":"control-structures/#fluent-api","text":"\u5bf9\u4e8eFluent API\uff0c\u6211\u4eec\u4f7f\u7528\u5de5\u4f5c\u6d41\u6784\u5efa\u5668\u4e0a\u7684 CreateBranch() \u65b9\u6cd5\u5b9a\u4e49\u5206\u652f\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Branch \u65b9\u6cd5\u9009\u62e9\u4e00\u4e2a\u5206\u652f\u3002 \u9009\u62e9\u8868\u8fbe\u5f0f\u5c06\u901a\u8fc7 Branch \u65b9\u6cd5\u4e0e\u5217\u51fa\u7684\u5206\u652f\u5339\u914d\uff0c\u5339\u914d\u7684\u4e0b\u4e00\u6b65\u5c06\u88ab\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002 \u5339\u914d\u591a\u4e2a\u4e0b\u4e00\u6b65\u5c06\u5bfc\u81f4\u5e76\u884c\u5206\u652f\u8fd0\u884c\u3002 \u8fd9\u4e2a\u5de5\u4f5c\u6d41\u5982\u679c data.Value1 \u503c\u662f1\uff0c\u5c06\u9009\u62e9 branch1 ,\u5982\u679c\u662f2\u5219\u662f branch2 \u3002 var branch1 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 1\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 1\"); var branch2 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 2\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 2\"); builder .StartWith<HelloWorld>() .Decide(data => data.Value1) .Branch((data, outcome) => data.Value1 == \"one\", branch1) .Branch((data, outcome) => data.Value1 == \"two\", branch2);","title":"Fluent API"},{"location":"control-structures/#json-yaml-api","text":"\u901a\u8fc7 SelectNextStep \u5c5e\u6027\u6765\u8fde\u63a5\u5206\u652f\uff0c\u800c\u4e0d\u662f NextStepId \u3002 \u8868\u8fbe\u5f0f\u5c06\u4e0e SelectNextStep \u4e2d\u5217\u51fa\u7684\u6b65\u9aa4id\u5339\u914d\uff0c\u5339\u914d\u7684\u4e0b\u4e00\u6b65\u5c06\u88ab\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002 { \"Id\": \"DecisionWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyData, MyApp\", \"Steps\": [ { \"Id\": \"decide\", \"StepType\": \"...\", \"SelectNextStep\": { \"Branch1\": \"<<result expression to match for branch 1>>\", \"Branch2\": \"<<result expression to match for branch 2>>\" } }, { \"Id\": \"Branch1\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 1\\\"\" } }, { \"Id\": \"Branch2\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 2\\\"\" } } ] } Id: DecisionWorkflow Version: 1 DataType: MyApp.MyData, MyApp Steps: - Id: decide StepType: WorkflowCore.Primitives.Decide, WorkflowCore Inputs: Expression: <<input expression to evaluate>> OutcomeSteps: Branch1: '<<result expression to match for branch 1>>' Branch2: '<<result expression to match for branch 2>>' - Id: Branch1 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 1\"' - Id: Branch2 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 2\"'","title":"JSON / YAML API"},{"location":"control-structures/#foreach","text":"","title":"\u5e76\u884cForEach"},{"location":"control-structures/#fluent-api_1","text":"public class ForEachWorkflow : IWorkflow { public string Id => \"Foreach\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<SayHello>() .ForEach(data => new List<int>() { 1, 2, 3, 4 }) .Do(x => x .StartWith<DisplayContext>() .Input(step => step.Message, (data, context) => context.Item) .Then<DoSomething>()) .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"control-structures/#json-yaml-api_1","text":"{ \"Id\": \"MyForEachStep\", \"StepType\": \"WorkflowCore.Primitives.ForEach, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Collection\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyForEachStep StepType: WorkflowCore.Primitives.ForEach, WorkflowCore NextStepId: \"...\" Inputs: Collection: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u200b","title":"JSON / YAML API"},{"location":"control-structures/#while","text":"\u4f7f\u7528 .While \u65b9\u6cd5\u542f\u52a8while\u6784\u9020","title":"While \u5faa\u73af"},{"location":"control-structures/#fluent-api_2","text":"public class WhileWorkflow : IWorkflow<MyData> { public string Id => \"While\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .While(data => data.Counter < 3) .Do(x => x .StartWith<DoSomething>() .Then<IncrementStep>() .Input(step => step.Value1, data => data.Counter) .Output(data => data.Counter, step => step.Value2)) .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"control-structures/#json-yaml-api_2","text":"{ \"Id\": \"MyWhileStep\", \"StepType\": \"WorkflowCore.Primitives.While, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyWhileStep StepType: WorkflowCore.Primitives.While, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u200b","title":"JSON / YAML API"},{"location":"control-structures/#if","text":"\u4f7f\u7528 .If \u65b9\u6cd5\u5f00\u59cb\u4e00\u4e2aIf\u6761\u4ef6","title":"If \u6761\u4ef6"},{"location":"control-structures/#fluent-api_3","text":"public class IfWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .If(data => data.Counter < 3).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 3\") ) .If(data => data.Counter < 5).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 5\") ) .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"control-structures/#json-yaml-api_3","text":"{ \"Id\": \"MyIfStep\", \"StepType\": \"WorkflowCore.Primitives.If, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyIfStep StepType: WorkflowCore.Primitives.If, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"control-structures/#parallel","text":"\u4f7f\u7528 .Parallel() \u65b9\u6cd5\u6765\u5206\u652f\u5e76\u884c\u4efb\u52a1","title":"Parallel\u8def\u5f84"},{"location":"control-structures/#fluent-api_4","text":"public class ParallelWorkflow : IWorkflow<MyData> { public string Id => \"parallel-sample\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .Parallel() .Do(then => then.StartWith<Task1dot1>() .Then<Task1dot2>() .Do(then => then.StartWith<Task2dot1>() .Then<Task2dot2>() .Do(then => then.StartWith<Task3dot1>() .Then<Task3dot2>() .Join() .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"control-structures/#json-yaml-api_4","text":"{ \"Id\": \"MyParallelStep\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"...\", \"Do\": [ [ { \"Id\": \"Branch1.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch1.Step2\" }, { \"Id\": \"Branch1.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ], [ { \"Id\": \"Branch2.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch2.Step2\" }, { \"Id\": \"Branch2.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ] ] } Id: MyParallelStep StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: \"...\" Do: - - Id: Branch1.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch1.Step2 - Id: Branch1.Step2 StepType: MyApp.DoSomething2, MyApp - - Id: Branch2.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch2.Step2 - Id: Branch2.Step2 StepType: MyApp.DoSomething2, MyApp \u200b","title":"JSON / YAML API"},{"location":"control-structures/#schedule","text":"\u4f7f\u7528 .Schedule \u6765\u6ce8\u518c\u672a\u6765\u7684\u4e00\u7ec4\u6b65\u9aa4\uff0c\u4ee5\u4fbf\u5728\u60a8\u7684\u5de5\u4f5c\u6d41\u7684\u540e\u53f0\u5f02\u6b65\u8fd0\u884c\u3002","title":"\u8ba1\u5212(Schedule)"},{"location":"control-structures/#fluent-api_5","text":"builder .StartWith(context => Console.WriteLine(\"Hello\")) .Schedule(data => TimeSpan.FromSeconds(5)).Do(schedule => schedule .StartWith(context => Console.WriteLine(\"Doing scheduled tasks\")) ) .Then(context => Console.WriteLine(\"Doing normal tasks\"));","title":"Fluent API"},{"location":"control-structures/#json-yaml-api_5","text":"{ \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Schedule, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Schedule, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"control-structures/#delay","text":"Delay\u6b65\u9aa4\u5c06\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u6bb5\u5185\u6682\u505c\u5de5\u4f5c\u6d41\u7684\u5f53\u524d\u5206\u652f\u3002","title":"\u5ef6\u8fdf(Delay)"},{"location":"control-structures/#json-yaml-api_6","text":"{ \"Id\": \"MyDelayStep\", \"StepType\": \"WorkflowCore.Primitives.Delay, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Period\": \"<<expression to evaluate>>\" } } Id: MyDelayStep StepType: WorkflowCore.Primitives.Delay, WorkflowCore NextStepId: \"...\" Inputs: Period: \"<<expression to evaluate>>\"","title":"JSON / YAML API"},{"location":"control-structures/#recur","text":"\u4f7f\u7528 .Recur \u5728\u60a8\u7684\u5de5\u4f5c\u6d41\u4e2d\u8bbe\u7f6e\u4e00\u7ec4\u91cd\u590d\u7684\u540e\u53f0\u6b65\u9aa4\uff0c\u76f4\u5230\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6","title":"\u9012\u5f52(Recur)"},{"location":"control-structures/#fluent-api_6","text":"builder .StartWith(context => Console.WriteLine(\"Hello\")) .Recur(data => TimeSpan.FromSeconds(5), data => data.Counter > 5).Do(recur => recur .StartWith(context => Console.WriteLine(\"Doing recurring task\")) ) .Then(context => Console.WriteLine(\"Carry on\"));","title":"Fluent API"},{"location":"control-structures/#json-yaml-api_7","text":"{ \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Recur, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\", \"StopCondition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Recur, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" StopCondition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u200b","title":"JSON / YAML API"},{"location":"error-handling/","text":"\u9519\u8bef\u5904\u7406(Error handling) \u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u914d\u7f6e\u81ea\u5df1\u7684\u9519\u8bef\u5904\u7406\u884c\u4e3a\uff0c\u53ef\u4ee5\u5728\u7a0d\u540e\u91cd\u8bd5\uff0c\u6302\u8d77\u5de5\u4f5c\u6d41\u6216\u7ec8\u6b62\u5de5\u4f5c\u6d41\u3002 Fluent API public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .OnError(WorkflowErrorHandling.Retry, TimeSpan.FromMinutes(10)) .Then<GoodbyeWorld>(); } JSON / YAML API ErrorBehavior { \"Id\": \"...\", \"StepType\": \"...\", \"ErrorBehavior\": \"Retry / Suspend / Terminate / Compensate\", \"RetryInterval\": \"00:10:00\" } Id: \"...\" StepType: \"...\" ErrorBehavior: Retry / Suspend / Terminate / Compensate RetryInterval: '00:10:00' \u5168\u5c40\u9519\u8bef\u5904\u7406 (Global Error handling) WorkflowHost \u670d\u52a1\u8fd8\u6709\u4e00\u4e2a .onStepError \u4e8b\u4ef6\uff0c\u53ef\u4ee5\u7528\u4e8e\u5728\u66f4\u5168\u5c40\u7684\u7ea7\u522b\u4e0a\u62e6\u622a\u6765\u81ea\u5de5\u4f5c\u6d41\u6b65\u9aa4\u7684\u5f02\u5e38\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"error-handling/#error-handling","text":"\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u914d\u7f6e\u81ea\u5df1\u7684\u9519\u8bef\u5904\u7406\u884c\u4e3a\uff0c\u53ef\u4ee5\u5728\u7a0d\u540e\u91cd\u8bd5\uff0c\u6302\u8d77\u5de5\u4f5c\u6d41\u6216\u7ec8\u6b62\u5de5\u4f5c\u6d41\u3002","title":"\u9519\u8bef\u5904\u7406(Error handling)"},{"location":"error-handling/#fluent-api","text":"public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .OnError(WorkflowErrorHandling.Retry, TimeSpan.FromMinutes(10)) .Then<GoodbyeWorld>(); }","title":"Fluent API"},{"location":"error-handling/#json-yaml-api","text":"ErrorBehavior { \"Id\": \"...\", \"StepType\": \"...\", \"ErrorBehavior\": \"Retry / Suspend / Terminate / Compensate\", \"RetryInterval\": \"00:10:00\" } Id: \"...\" StepType: \"...\" ErrorBehavior: Retry / Suspend / Terminate / Compensate RetryInterval: '00:10:00'","title":"JSON / YAML API"},{"location":"error-handling/#global-error-handling","text":"WorkflowHost \u670d\u52a1\u8fd8\u6709\u4e00\u4e2a .onStepError \u4e8b\u4ef6\uff0c\u53ef\u4ee5\u7528\u4e8e\u5728\u66f4\u5168\u5c40\u7684\u7ea7\u522b\u4e0a\u62e6\u622a\u6765\u81ea\u5de5\u4f5c\u6d41\u6b65\u9aa4\u7684\u5f02\u5e38\u3002","title":"\u5168\u5c40\u9519\u8bef\u5904\u7406 (Global Error handling)"},{"location":"external-events/","text":"\u4e8b\u4ef6 \u5de5\u4f5c\u6d41\u8fd8\u53ef\u4ee5\u7b49\u5f85\u5916\u90e8\u4e8b\u4ef6\u540e\u518d\u7ee7\u7eed\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u7b49\u5f85\u4e00\u4e2a\u952e\u503c\u4e3a0\u7684\u540d\u4e3a\u201cMyEvent\u201d\u7684\u4e8b\u4ef6\u3002 \u4e00\u65e6\u5916\u90e8\u6e90\u89e6\u53d1\u4e86\u8be5\u4e8b\u4ef6\uff0c\u5de5\u4f5c\u6d41\u5c06\u88ab\u5524\u9192\u5e76\u7ee7\u7eed\u5904\u7406\uff0c\u5e76\u5c06\u8be5\u4e8b\u4ef6\u751f\u6210\u7684\u6570\u636e\u4f20\u9012\u5230\u4e0b\u4e00\u6b65\u3002 public class EventSampleWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith(context => ExecutionResult.Next()) .WaitFor(\"MyEvent\", data => \"0\") .Output(data => data.Value, step => step.EventData) .Then<CustomMessage>() .Input(step => step.Message, data => \"The data from the event is \" + data.Value); } } ... //External events are published via the host //All workflows that have subscribed to MyEvent 0, will be passed \"hello\" host.PublishEvent(\"MyEvent\", \"0\", \"hello\"); \u6709\u6548\u65e5\u671f(Effective Date) \u60a8\u8fd8\u53ef\u4ee5\u5728\u7b49\u5f85\u4e8b\u4ef6\u65f6\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u65e5\u671f\uff0c\u8fd9\u5141\u8bb8\u60a8\u54cd\u5e94\u8fc7\u53bb\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u4ec5\u54cd\u5e94\u5728\u6709\u6548\u65e5\u671f\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u4ef6\u3002 JSON / YAML API .WaitFor \u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8f93\u5165\u6765\u5b9e\u73b0 \u5b57\u6bb5 \u63cf\u8ff0 CancelCondition \u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.EventName \u6307\u5b9a\u4e8b\u4ef6\u540d\u79f0\u7684\u8868\u8fbe\u5f0f Inputs.EventKey \u6307\u5b9a\u4e8b\u4ef6\u952e\u503c\u7684\u8868\u8fbe\u5f0f Inputs.EffectiveDate \u6307\u5b9a\u6709\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyWaitStep\", \"StepType\": \"WorkflowCore.Primitives.WaitFor, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"EventName\": \"\\\"Event1\\\"\", \"EventKey\": \"\\\"Key1\\\"\", \"EffectiveDate\": \"DateTime.Now\" } } Id: MyWaitStep StepType: WorkflowCore.Primitives.WaitFor, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: EventName: '\"Event1\"' EventKey: '\"Key1\"' EffectiveDate: DateTime.Now","title":"\u5916\u90e8\u4e8b\u4ef6"},{"location":"external-events/#_1","text":"\u5de5\u4f5c\u6d41\u8fd8\u53ef\u4ee5\u7b49\u5f85\u5916\u90e8\u4e8b\u4ef6\u540e\u518d\u7ee7\u7eed\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u7b49\u5f85\u4e00\u4e2a\u952e\u503c\u4e3a0\u7684\u540d\u4e3a\u201cMyEvent\u201d\u7684\u4e8b\u4ef6\u3002 \u4e00\u65e6\u5916\u90e8\u6e90\u89e6\u53d1\u4e86\u8be5\u4e8b\u4ef6\uff0c\u5de5\u4f5c\u6d41\u5c06\u88ab\u5524\u9192\u5e76\u7ee7\u7eed\u5904\u7406\uff0c\u5e76\u5c06\u8be5\u4e8b\u4ef6\u751f\u6210\u7684\u6570\u636e\u4f20\u9012\u5230\u4e0b\u4e00\u6b65\u3002 public class EventSampleWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith(context => ExecutionResult.Next()) .WaitFor(\"MyEvent\", data => \"0\") .Output(data => data.Value, step => step.EventData) .Then<CustomMessage>() .Input(step => step.Message, data => \"The data from the event is \" + data.Value); } } ... //External events are published via the host //All workflows that have subscribed to MyEvent 0, will be passed \"hello\" host.PublishEvent(\"MyEvent\", \"0\", \"hello\");","title":"\u4e8b\u4ef6"},{"location":"external-events/#effective-date","text":"\u60a8\u8fd8\u53ef\u4ee5\u5728\u7b49\u5f85\u4e8b\u4ef6\u65f6\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u65e5\u671f\uff0c\u8fd9\u5141\u8bb8\u60a8\u54cd\u5e94\u8fc7\u53bb\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u4ec5\u54cd\u5e94\u5728\u6709\u6548\u65e5\u671f\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u4ef6\u3002","title":"\u6709\u6548\u65e5\u671f(Effective Date)"},{"location":"external-events/#json-yaml-api","text":".WaitFor \u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8f93\u5165\u6765\u5b9e\u73b0 \u5b57\u6bb5 \u63cf\u8ff0 CancelCondition \u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.EventName \u6307\u5b9a\u4e8b\u4ef6\u540d\u79f0\u7684\u8868\u8fbe\u5f0f Inputs.EventKey \u6307\u5b9a\u4e8b\u4ef6\u952e\u503c\u7684\u8868\u8fbe\u5f0f Inputs.EffectiveDate \u6307\u5b9a\u6709\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyWaitStep\", \"StepType\": \"WorkflowCore.Primitives.WaitFor, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"EventName\": \"\\\"Event1\\\"\", \"EventKey\": \"\\\"Key1\\\"\", \"EffectiveDate\": \"DateTime.Now\" } } Id: MyWaitStep StepType: WorkflowCore.Primitives.WaitFor, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: EventName: '\"Event1\"' EventKey: '\"Key1\"' EffectiveDate: DateTime.Now","title":"JSON / YAML API"},{"location":"getting-started/","text":"\u57fa\u672c\u6982\u5ff5 \u6b65\u9aa4(steps) \u5de5\u4f5c\u6d41\u7531\u4e00\u7cfb\u5217\u76f8\u4e92\u5173\u8054\u7684\u6b65\u9aa4\u7ec4\u6210\u3002 \u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u6709\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u8fd9\u4e9b\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u88ab\u4f20\u9012\u56de\u5b83\u6240\u5728\u7684\u5de5\u4f5c\u6d41\u3002 \u6b65\u9aa4\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea StepBody \u6216 StepBodyAsync \u7684\u62bd\u8c61\u7c7b\u5e76\u5b9e\u73b0\u4e86 Run \u6216 RunAsync \u65b9\u6cd5\u6765\u5b9a\u4e49\u7684\u3002 \u5b83\u4eec\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u65f6\u5185\u8054\u521b\u5efa\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e9b\u6b65\u9aa4 public class HelloWorld : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); } } \u6b65\u9aa4\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea StepBody \u6216 StepBodyAsync \u62bd\u8c61\u7c7b\u7684\u7c7b\u5e76\u5b9e\u73b0 Run / RunAsync \u65b9\u6cd5\u6765\u5b9a\u4e49\u7684\u3002 StepBody \u548c StepBodyAsync \u7c7b\u5b9e\u73b0\u7531\u5de5\u4f5c\u6d41\u5bbf\u4e3b\u9996\u5148\u5c1d\u8bd5\u4f7f\u7528 IServiceProvider \u4f9d\u8d56\u6ce8\u5165,\u5982\u679c\u4e0d\u80fd\u7528\u8fd9\u79cd\u65b9\u6cd5\u6784\u5efa,\u5b83\u4f1a\u5bfb\u627e\u4e00\u4e2a\u65e0\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u4e5f\u53ef\u4ee5\u521b\u5efa\u5185\u8054\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u3002 \u7136\u540e\u901a\u8fc7\u7ec4\u6210\u4e00\u4e2a\u6b65\u9aa4\u94fe\u6765\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u3002 \u8fd9\u662f\u901a\u8fc7\u5b9e\u73b0IWorkflow\u63a5\u53e3\u6765\u5b8c\u6210\u7684 public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .Then<GoodbyeWorld>(); } } IWorkflow \u63a5\u53e3\u8fd8\u6709\u4e00\u4e2a\u53ea\u8bfb Id \u5c5e\u6027\u548c\u53ea\u8bfb Version \u5c5e\u6027\u3002 \u5b83\u4eec\u88ab\u5de5\u4f5c\u6d41\u4e3b\u673a\u7528\u6765\u6807\u8bc6\u4e00\u4e2a\u5de5\u4f5c\u6d41\u5b9a\u4e49\u3002 \u8fd9\u4e2a\u7528JSON\u5b9e\u73b0\u7684\u5de5\u4f5c\u6d41\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684 { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } \u60a8\u8fd8\u53ef\u4ee5\u5185\u8054\u5b9a\u4e49\u6b65\u9aa4 public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith(context => { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); }) .Then(context => { Console.WriteLine(\"Goodbye world\"); return ExecutionResult.Next(); }); } } \u6bcf\u4e2a\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u90fd\u88ab\u6301\u4e45\u5316\u5230\u6bcf\u4e2a\u6b65\u9aa4\u4e4b\u95f4\u6240\u9009\u62e9\u7684\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u5728\u90a3\u91cc\u53ef\u4ee5\u5728\u4ee5\u540e\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u62fe\u53d6\u5b83\u7ee7\u7eed\u6267\u884c\u3002 \u60a8\u7684\u6b65\u9aa4\u7684\u7ed3\u679c\u53ef\u4ee5\u6307\u793a\u5de5\u4f5c\u6d41\u4e3b\u673a\u5c06\u5de5\u4f5c\u6d41\u7684\u8fdb\u4e00\u6b65\u6267\u884c\u63a8\u8fdf\u5230\u5c06\u6765\u67d0\u4e2a\u65f6\u95f4\u70b9\u6216\u54cd\u5e94\u5916\u90e8\u4e8b\u4ef6\u3002 \u4e3b\u673a(host) \u5de5\u4f5c\u6d41\u4e3b\u673a\u662f\u8d1f\u8d23\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u670d\u52a1\u3002 \u5b83\u901a\u8fc7\u8f6e\u8be2\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\u4ee5\u83b7\u53d6\u51c6\u5907\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u5b9e\u4f8b\uff0c\u6267\u884c\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u56de\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5728\u4e0b\u6b21\u8fd0\u884c\u65f6\u5b58\u50a8\u5b83\u4eec\u3002 \u5b83\u8fd8\u8d1f\u8d23\u5c06\u4e8b\u4ef6\u53d1\u5e03\u5230\u53ef\u80fd\u6b63\u5728\u7b49\u5f85\u4e8b\u4ef6\u7684\u4efb\u4f55\u5de5\u4f5c\u6d41\u3002 \u8bbe\u7f6e(setup) \u4f7f\u7528 IServiceCollection \u7684 AddWorkflow \u6269\u5c55\u65b9\u6cd5\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u914d\u7f6e\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u88ab\u914d\u7f6e\u4e3a MemoryPersistenceProvider \u548c SingleNodeConcurrencyProvider \u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u3002 \u6b64\u65f6\u60a8\u8fd8\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aDB\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\u3002 services.AddWorkflow(); \u7528\u6cd5(Usage) \u5f53\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u4ece\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6 IServiceProvider \u4e2d\u83b7\u53d6\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002 \u8bf7\u786e\u4fdd\u8c03\u7528 RegisterWorkflow \uff0c\u4ee5\u4fbf\u5de5\u4f5c\u6d41\u4e3b\u673a\u77e5\u9053\u60a8\u7684\u6240\u6709\u5de5\u4f5c\u6d41\uff0c\u7136\u540e\u8c03\u7528 Start() \u6765\u542f\u52a8\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u7ebf\u7a0b\u6c60\u3002 \u4f7f\u7528 StartWorkflow \u65b9\u6cd5\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u7279\u5b9a\u5de5\u4f5c\u6d41\u7684\u65b0\u5b9e\u4f8b\u3002 var host = serviceProvider.GetService<IWorkflowHost>(); host.RegisterWorkflow<HelloWorldWorkflow>(); host.Start(); host.StartWorkflow(\"HelloWorld\", 1, null); Console.ReadLine(); host.Stop(); \u5728\u6b65\u9aa4\u4e4b\u95f4\u4f20\u9012\u6570\u636e \u6bcf\u4e2a\u6b65\u9aa4\u90fd\u662f\u4e00\u4e2a\u9ed1\u76d2\uff0c\u56e0\u6b64\u5b83\u4eec\u652f\u6301\u8f93\u5165\u548c\u8f93\u51fa\u3002 \u8fd9\u4e9b\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u6620\u5c04\u5230\u5b9a\u4e49\u4e0e\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u76f8\u5173\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u6570\u636e\u7c7b\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e0a\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u7136\u540e\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5185\u90e8\u6570\u636e\u7684\u7c7b\u578b\u5316\u7c7b\u5b9a\u4e49\u5de5\u4f5c\u6d41\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u6620\u5c04\u5230\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u4e0a\u7684\u5c5e\u6027\u3002 //Our workflow step with inputs and outputs public class AddNumbers : StepBody { public int Input1 { get; set; } public int Input2 { get; set; } public int Output { get; set; } public override ExecutionResult Run(IStepExecutionContext context) { Output = (Input1 + Input2); return ExecutionResult.Next(); } } //Our class to define the internal data of our workflow public class MyDataClass { public int Value1 { get; set; } public int Value2 { get; set; } public int Value3 { get; set; } } //Our workflow definition with strongly typed internal data and mapped inputs & outputs public class PassingDataWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith<AddNumbers>() .Input(step => step.Input1, data => data.Value1) .Input(step => step.Input2, data => data.Value2) .Output(data => data.Value3, step => step.Output) .Then<CustomMessage>() .Input(step => step.Message, data => \"The answer is \" + data.Value3.ToString()); } ... } \u6216\u8005\u662fJSON\u683c\u5f0f { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"ShowResult\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Output\" } }, { \"Id\": \"ShowResult\", \"StepType\": \"MyApp.CustomMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"The answer is \\\" + data.Value1\" } } ] } \u6216\u8005\u662fYAML\u683c\u5f0f Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: ShowResult Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Output - Id: ShowResult StepType: MyApp.CustomMessage, MyApp Inputs: Message: '\"The answer is \" + data.Value1' \u5411\u6b65\u9aa4\u4e2d\u6ce8\u5165\u4f9d\u8d56\u9879 \u5982\u679c\u5411IoC\u5bb9\u5668\u6ce8\u518c\u4e86\u6b65\u9aa4\u7c7b\uff0c\u90a3\u4e48\u5de5\u4f5c\u6d41\u5bbf\u4e3b\u5c06\u4f7f\u7528IoC\u5bb9\u5668\u6765\u6784\u9020\u5b83\u4eec\uff0c\u4ece\u800c\u6ce8\u5165\u4efb\u4f55\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u5728\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e2d\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u8003\u8651\u4ee5\u4e0b\u670d\u52a1 public interface IMyService { void DoTheThings(); } ... public class MyService : IMyService { public void DoTheThings() { Console.WriteLine(\"Doing stuff...\"); } } \u5b83\u88ab\u5982\u4e0b\u7684\u5de5\u4f5c\u6d41\u6b65\u9aa4\u6240\u4f7f\u7528 public class DoSomething : StepBody { private IMyService _myService; public DoSomething(IMyService myService) { _myService = myService; } public override ExecutionResult Run(IStepExecutionContext context) { _myService.DoTheThings(); return ExecutionResult.Next(); } } \u5728\u8bbe\u7f6eIoC\u5bb9\u5668\u65f6\uff0c\u53ea\u9700\u5c06\u670d\u52a1\u548c\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f5c\u4e3a\u6682\u6001\u6dfb\u52a0\u5230\u670d\u52a1\u96c6\u5408\u4e2d\u3002 (\u907f\u514d\u5c06\u6b65\u9aa4\u6ce8\u518c\u4e3a\u5355\u4f8b\uff0c\u56e0\u4e3a\u591a\u4e2a\u5e76\u53d1\u5de5\u4f5c\u6d41\u53ef\u80fd\u9700\u8981\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002) IServiceCollection services = new ServiceCollection(); services.AddLogging(); services.AddWorkflow(); services.AddTransient<DoSomething>(); services.AddTransient<IMyService, MyService>();","title":"\u5165\u95e8\u6307\u5357"},{"location":"getting-started/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"getting-started/#steps","text":"\u5de5\u4f5c\u6d41\u7531\u4e00\u7cfb\u5217\u76f8\u4e92\u5173\u8054\u7684\u6b65\u9aa4\u7ec4\u6210\u3002 \u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u6709\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u8fd9\u4e9b\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u88ab\u4f20\u9012\u56de\u5b83\u6240\u5728\u7684\u5de5\u4f5c\u6d41\u3002 \u6b65\u9aa4\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea StepBody \u6216 StepBodyAsync \u7684\u62bd\u8c61\u7c7b\u5e76\u5b9e\u73b0\u4e86 Run \u6216 RunAsync \u65b9\u6cd5\u6765\u5b9a\u4e49\u7684\u3002 \u5b83\u4eec\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u65f6\u5185\u8054\u521b\u5efa\u3002","title":"\u6b65\u9aa4(steps)"},{"location":"getting-started/#_2","text":"public class HelloWorld : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); } } \u6b65\u9aa4\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea StepBody \u6216 StepBodyAsync \u62bd\u8c61\u7c7b\u7684\u7c7b\u5e76\u5b9e\u73b0 Run / RunAsync \u65b9\u6cd5\u6765\u5b9a\u4e49\u7684\u3002 StepBody \u548c StepBodyAsync \u7c7b\u5b9e\u73b0\u7531\u5de5\u4f5c\u6d41\u5bbf\u4e3b\u9996\u5148\u5c1d\u8bd5\u4f7f\u7528 IServiceProvider \u4f9d\u8d56\u6ce8\u5165,\u5982\u679c\u4e0d\u80fd\u7528\u8fd9\u79cd\u65b9\u6cd5\u6784\u5efa,\u5b83\u4f1a\u5bfb\u627e\u4e00\u4e2a\u65e0\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u4e5f\u53ef\u4ee5\u521b\u5efa\u5185\u8054\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u3002","title":"\u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e9b\u6b65\u9aa4"},{"location":"getting-started/#iworkflow","text":"public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .Then<GoodbyeWorld>(); } } IWorkflow \u63a5\u53e3\u8fd8\u6709\u4e00\u4e2a\u53ea\u8bfb Id \u5c5e\u6027\u548c\u53ea\u8bfb Version \u5c5e\u6027\u3002 \u5b83\u4eec\u88ab\u5de5\u4f5c\u6d41\u4e3b\u673a\u7528\u6765\u6807\u8bc6\u4e00\u4e2a\u5de5\u4f5c\u6d41\u5b9a\u4e49\u3002 \u8fd9\u4e2a\u7528JSON\u5b9e\u73b0\u7684\u5de5\u4f5c\u6d41\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684 { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } \u60a8\u8fd8\u53ef\u4ee5\u5185\u8054\u5b9a\u4e49\u6b65\u9aa4 public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith(context => { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); }) .Then(context => { Console.WriteLine(\"Goodbye world\"); return ExecutionResult.Next(); }); } } \u6bcf\u4e2a\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u90fd\u88ab\u6301\u4e45\u5316\u5230\u6bcf\u4e2a\u6b65\u9aa4\u4e4b\u95f4\u6240\u9009\u62e9\u7684\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u5728\u90a3\u91cc\u53ef\u4ee5\u5728\u4ee5\u540e\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u62fe\u53d6\u5b83\u7ee7\u7eed\u6267\u884c\u3002 \u60a8\u7684\u6b65\u9aa4\u7684\u7ed3\u679c\u53ef\u4ee5\u6307\u793a\u5de5\u4f5c\u6d41\u4e3b\u673a\u5c06\u5de5\u4f5c\u6d41\u7684\u8fdb\u4e00\u6b65\u6267\u884c\u63a8\u8fdf\u5230\u5c06\u6765\u67d0\u4e2a\u65f6\u95f4\u70b9\u6216\u54cd\u5e94\u5916\u90e8\u4e8b\u4ef6\u3002","title":"\u7136\u540e\u901a\u8fc7\u7ec4\u6210\u4e00\u4e2a\u6b65\u9aa4\u94fe\u6765\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u3002 \u8fd9\u662f\u901a\u8fc7\u5b9e\u73b0IWorkflow\u63a5\u53e3\u6765\u5b8c\u6210\u7684"},{"location":"getting-started/#host","text":"\u5de5\u4f5c\u6d41\u4e3b\u673a\u662f\u8d1f\u8d23\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u670d\u52a1\u3002 \u5b83\u901a\u8fc7\u8f6e\u8be2\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\u4ee5\u83b7\u53d6\u51c6\u5907\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u5b9e\u4f8b\uff0c\u6267\u884c\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u56de\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4ee5\u4fbf\u5728\u4e0b\u6b21\u8fd0\u884c\u65f6\u5b58\u50a8\u5b83\u4eec\u3002 \u5b83\u8fd8\u8d1f\u8d23\u5c06\u4e8b\u4ef6\u53d1\u5e03\u5230\u53ef\u80fd\u6b63\u5728\u7b49\u5f85\u4e8b\u4ef6\u7684\u4efb\u4f55\u5de5\u4f5c\u6d41\u3002","title":"\u4e3b\u673a(host)"},{"location":"getting-started/#setup","text":"\u4f7f\u7528 IServiceCollection \u7684 AddWorkflow \u6269\u5c55\u65b9\u6cd5\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u914d\u7f6e\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u88ab\u914d\u7f6e\u4e3a MemoryPersistenceProvider \u548c SingleNodeConcurrencyProvider \u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u3002 \u6b64\u65f6\u60a8\u8fd8\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aDB\u6301\u4e45\u5316\u63d0\u4f9b\u7a0b\u5e8f\u3002 services.AddWorkflow();","title":"\u8bbe\u7f6e(setup)"},{"location":"getting-started/#usage","text":"\u5f53\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u4ece\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6 IServiceProvider \u4e2d\u83b7\u53d6\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002 \u8bf7\u786e\u4fdd\u8c03\u7528 RegisterWorkflow \uff0c\u4ee5\u4fbf\u5de5\u4f5c\u6d41\u4e3b\u673a\u77e5\u9053\u60a8\u7684\u6240\u6709\u5de5\u4f5c\u6d41\uff0c\u7136\u540e\u8c03\u7528 Start() \u6765\u542f\u52a8\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u7ebf\u7a0b\u6c60\u3002 \u4f7f\u7528 StartWorkflow \u65b9\u6cd5\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u7279\u5b9a\u5de5\u4f5c\u6d41\u7684\u65b0\u5b9e\u4f8b\u3002 var host = serviceProvider.GetService<IWorkflowHost>(); host.RegisterWorkflow<HelloWorldWorkflow>(); host.Start(); host.StartWorkflow(\"HelloWorld\", 1, null); Console.ReadLine(); host.Stop();","title":"\u7528\u6cd5(Usage)"},{"location":"getting-started/#_3","text":"\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u662f\u4e00\u4e2a\u9ed1\u76d2\uff0c\u56e0\u6b64\u5b83\u4eec\u652f\u6301\u8f93\u5165\u548c\u8f93\u51fa\u3002 \u8fd9\u4e9b\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u6620\u5c04\u5230\u5b9a\u4e49\u4e0e\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u76f8\u5173\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u6570\u636e\u7c7b\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728\u4e00\u4e2a\u6b65\u9aa4\u4e0a\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u7136\u540e\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5185\u90e8\u6570\u636e\u7684\u7c7b\u578b\u5316\u7c7b\u5b9a\u4e49\u5de5\u4f5c\u6d41\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u6620\u5c04\u5230\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u4e0a\u7684\u5c5e\u6027\u3002 //Our workflow step with inputs and outputs public class AddNumbers : StepBody { public int Input1 { get; set; } public int Input2 { get; set; } public int Output { get; set; } public override ExecutionResult Run(IStepExecutionContext context) { Output = (Input1 + Input2); return ExecutionResult.Next(); } } //Our class to define the internal data of our workflow public class MyDataClass { public int Value1 { get; set; } public int Value2 { get; set; } public int Value3 { get; set; } } //Our workflow definition with strongly typed internal data and mapped inputs & outputs public class PassingDataWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith<AddNumbers>() .Input(step => step.Input1, data => data.Value1) .Input(step => step.Input2, data => data.Value2) .Output(data => data.Value3, step => step.Output) .Then<CustomMessage>() .Input(step => step.Message, data => \"The answer is \" + data.Value3.ToString()); } ... } \u6216\u8005\u662fJSON\u683c\u5f0f { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"ShowResult\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Output\" } }, { \"Id\": \"ShowResult\", \"StepType\": \"MyApp.CustomMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"The answer is \\\" + data.Value1\" } } ] } \u6216\u8005\u662fYAML\u683c\u5f0f Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: ShowResult Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Output - Id: ShowResult StepType: MyApp.CustomMessage, MyApp Inputs: Message: '\"The answer is \" + data.Value1'","title":"\u5728\u6b65\u9aa4\u4e4b\u95f4\u4f20\u9012\u6570\u636e"},{"location":"getting-started/#_4","text":"\u5982\u679c\u5411IoC\u5bb9\u5668\u6ce8\u518c\u4e86\u6b65\u9aa4\u7c7b\uff0c\u90a3\u4e48\u5de5\u4f5c\u6d41\u5bbf\u4e3b\u5c06\u4f7f\u7528IoC\u5bb9\u5668\u6765\u6784\u9020\u5b83\u4eec\uff0c\u4ece\u800c\u6ce8\u5165\u4efb\u4f55\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u5728\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e2d\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u8003\u8651\u4ee5\u4e0b\u670d\u52a1 public interface IMyService { void DoTheThings(); } ... public class MyService : IMyService { public void DoTheThings() { Console.WriteLine(\"Doing stuff...\"); } } \u5b83\u88ab\u5982\u4e0b\u7684\u5de5\u4f5c\u6d41\u6b65\u9aa4\u6240\u4f7f\u7528 public class DoSomething : StepBody { private IMyService _myService; public DoSomething(IMyService myService) { _myService = myService; } public override ExecutionResult Run(IStepExecutionContext context) { _myService.DoTheThings(); return ExecutionResult.Next(); } } \u5728\u8bbe\u7f6eIoC\u5bb9\u5668\u65f6\uff0c\u53ea\u9700\u5c06\u670d\u52a1\u548c\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f5c\u4e3a\u6682\u6001\u6dfb\u52a0\u5230\u670d\u52a1\u96c6\u5408\u4e2d\u3002 (\u907f\u514d\u5c06\u6b65\u9aa4\u6ce8\u518c\u4e3a\u5355\u4f8b\uff0c\u56e0\u4e3a\u591a\u4e2a\u5e76\u53d1\u5de5\u4f5c\u6d41\u53ef\u80fd\u9700\u8981\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002) IServiceCollection services = new ServiceCollection(); services.AddLogging(); services.AddWorkflow(); services.AddTransient<DoSomething>(); services.AddTransient<IMyService, MyService>();","title":"\u5411\u6b65\u9aa4\u4e2d\u6ce8\u5165\u4f9d\u8d56\u9879"},{"location":"json-yaml-definitions/","text":"\u4eceJSON/YAML\u52a0\u8f7d\u5de5\u4f5c\u6d41\u5b9a\u4e49 \u4ecenuget\u5b89\u88c5 WorkflowCore.DSL \u5305\u5e76\u5728\u60a8\u7684\u670d\u52a1\u96c6\u5408\u4e2d\u8c03\u7528 AddWorkflowDSL \u3002 \u7136\u540e\u4eceIoC\u5bb9\u5668\u4e2d\u83b7\u53d6 DefinitionLoader \u5e76\u8c03\u7528 .LoadDefinition \u65b9\u6cd5 using WorkflowCore.Interface; ... var loader = serviceProvider.GetService<IDefinitionLoader>(); loader.LoadDefinition(\"<<json or yaml string here>>\", Deserializers.Json); \u516c\u5171DSL JSON\u548cYAML\u683c\u5f0f\u90fd\u9075\u5faa\u4e00\u79cd\u5e38\u89c1\u7684DSL\uff0c\u5176\u4e2d\u5de5\u4f5c\u6d41\u4e2d\u7684\u6b65\u9aa4\u7c7b\u578b\u7531\u5b8c\u5168\u9650\u5b9a\u7684\u7c7b\u540d\u5f15\u7528\u3002 \u5185\u7f6e\u7684\u6b65\u9aa4\u7c7b\u578b\u901a\u5e38\u4f4d\u4e8e WorklfowCore.Primitives \u540d\u79f0\u7a7a\u95f4\u3002 Field Description Id \u5de5\u4f5c\u6d41\u5b9a\u4e49 ID Version \u5de5\u4f5c\u6d41\u5b9a\u4e49\u7248\u672c DataType \u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d Steps[].Id \u6b65\u9aa4Id(\u8981\u6c42\u6bcf\u4e2a\u6b65\u9aa4\u4e00\u4e2a\u6807\u8bc6\u952e) Steps[].StepType \u6b65\u9aa4\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d Steps[].NextStepId \u6b64\u6b65\u9aa4\u5b8c\u6210\u540e\u7684\u4e0b\u4e00\u6b65\u6b65\u9aa4ID Steps[].Inputs \u53ef\u9009\u7684\u6b65\u9aa4\u8f93\u5165\u7684\u952e/\u503c\u5bf9 Steps[].Outputs \u53ef\u9009\u7684\u6b65\u9aa4\u8f93\u51fa\u7684\u952e/\u503c\u5bf9 Steps[].CancelCondition \u53ef\u9009\u7684\u53d6\u6d88\u6761\u4ef6 { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: HelloWorld Version: 1 Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Bye - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp \u8f93\u5165\u548c\u8f93\u51fa \u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u4f5c\u4e3a\u952e/\u503c\u5bf9\u5bf9\u8c61\u7ed1\u5b9a\u5230\u4e00\u4e2a\u6b65\u9aa4\uff0c *\u8f93\u5165\u96c6\u5408\uff0c\u952e\u5c06\u5339\u914dstep\u7c7b\u4e0a\u7684\u5c5e\u6027\uff0c\u503c\u5c06\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5305\u542b\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u53c2\u6570\u3002 *\u8f93\u51fa\u96c6\u5408\uff0c\u952e\u5c06\u5339\u914dData\u7c7b\u4e0a\u7684\u5c5e\u6027\uff0c\u503c\u5c06\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u6b65\u9aa4\u4f5c\u4e3a\u53c2\u6570\u4f9b\u60a8\u4f7f\u7528\u3002 \u8868\u8fbe\u5f0f\u8bed\u8a00\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Add\" }, { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"Bye\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Result\" } }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Add - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: Bye Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Result - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Print\" }, { \"Id\": \"Print\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hi there!\\\"\" } } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Print - Id: Print StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hi there!\"' \u60a8\u8fd8\u53ef\u4ee5\u5c06\u5bf9\u8c61\u56fe\u4f20\u9012\u7ed9\u6b65\u9aa4\u8f93\u5165\uff0c\u800c\u4e0d\u53ea\u662f\u6807\u91cf\u503c \"inputs\": { \"Body\": { \"Value1\": 1, \"Value2\": 2 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, \u5982\u679c\u60a8\u60f3\u8ba1\u7b97\u5bf9\u8c61\u7684\u7ed9\u5b9a\u5c5e\u6027\u7684\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u5728\u53c2\u6570\u524d\u9762\u6dfb\u52a0@\u5e76\u4f20\u9012\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 \"inputs\": { \"Body\": { \"@Value1\": \"data.MyValue * 2\", \"Value2\": 5 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, \u679a\u4e3e(Enums) \u5982\u679c\u4f60\u7684\u6b65\u9aa4\u6709\u4e00\u4e2a\u679a\u4e3e\u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u679a\u4e3e\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5b83\u4f1a\u81ea\u52a8\u8f6c\u6362\u3002 \u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u53ef\u7528\u7684\u73af\u5883\u53d8\u91cf \u60a8\u53ef\u4ee5\u4ece\u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u8bbf\u95ee\u73af\u5883\u53d8\u91cf\u3002 \u7528\u6cd5: environment[\"VARIABLE_NAME\"]","title":"JSON/YAML\u5b9a\u4e49"},{"location":"json-yaml-definitions/#jsonyaml","text":"\u4ecenuget\u5b89\u88c5 WorkflowCore.DSL \u5305\u5e76\u5728\u60a8\u7684\u670d\u52a1\u96c6\u5408\u4e2d\u8c03\u7528 AddWorkflowDSL \u3002 \u7136\u540e\u4eceIoC\u5bb9\u5668\u4e2d\u83b7\u53d6 DefinitionLoader \u5e76\u8c03\u7528 .LoadDefinition \u65b9\u6cd5 using WorkflowCore.Interface; ... var loader = serviceProvider.GetService<IDefinitionLoader>(); loader.LoadDefinition(\"<<json or yaml string here>>\", Deserializers.Json);","title":"\u4eceJSON/YAML\u52a0\u8f7d\u5de5\u4f5c\u6d41\u5b9a\u4e49"},{"location":"json-yaml-definitions/#dsl","text":"JSON\u548cYAML\u683c\u5f0f\u90fd\u9075\u5faa\u4e00\u79cd\u5e38\u89c1\u7684DSL\uff0c\u5176\u4e2d\u5de5\u4f5c\u6d41\u4e2d\u7684\u6b65\u9aa4\u7c7b\u578b\u7531\u5b8c\u5168\u9650\u5b9a\u7684\u7c7b\u540d\u5f15\u7528\u3002 \u5185\u7f6e\u7684\u6b65\u9aa4\u7c7b\u578b\u901a\u5e38\u4f4d\u4e8e WorklfowCore.Primitives \u540d\u79f0\u7a7a\u95f4\u3002 Field Description Id \u5de5\u4f5c\u6d41\u5b9a\u4e49 ID Version \u5de5\u4f5c\u6d41\u5b9a\u4e49\u7248\u672c DataType \u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d Steps[].Id \u6b65\u9aa4Id(\u8981\u6c42\u6bcf\u4e2a\u6b65\u9aa4\u4e00\u4e2a\u6807\u8bc6\u952e) Steps[].StepType \u6b65\u9aa4\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d Steps[].NextStepId \u6b64\u6b65\u9aa4\u5b8c\u6210\u540e\u7684\u4e0b\u4e00\u6b65\u6b65\u9aa4ID Steps[].Inputs \u53ef\u9009\u7684\u6b65\u9aa4\u8f93\u5165\u7684\u952e/\u503c\u5bf9 Steps[].Outputs \u53ef\u9009\u7684\u6b65\u9aa4\u8f93\u51fa\u7684\u952e/\u503c\u5bf9 Steps[].CancelCondition \u53ef\u9009\u7684\u53d6\u6d88\u6761\u4ef6 { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: HelloWorld Version: 1 Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Bye - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"\u516c\u5171DSL"},{"location":"json-yaml-definitions/#_1","text":"\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u4f5c\u4e3a\u952e/\u503c\u5bf9\u5bf9\u8c61\u7ed1\u5b9a\u5230\u4e00\u4e2a\u6b65\u9aa4\uff0c *\u8f93\u5165\u96c6\u5408\uff0c\u952e\u5c06\u5339\u914dstep\u7c7b\u4e0a\u7684\u5c5e\u6027\uff0c\u503c\u5c06\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5305\u542b\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u53c2\u6570\u3002 *\u8f93\u51fa\u96c6\u5408\uff0c\u952e\u5c06\u5339\u914dData\u7c7b\u4e0a\u7684\u5c5e\u6027\uff0c\u503c\u5c06\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u6b65\u9aa4\u4f5c\u4e3a\u53c2\u6570\u4f9b\u60a8\u4f7f\u7528\u3002 \u8868\u8fbe\u5f0f\u8bed\u8a00\u529f\u80fd\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Add\" }, { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"Bye\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Result\" } }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Add - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: Bye Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Result - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Print\" }, { \"Id\": \"Print\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hi there!\\\"\" } } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Print - Id: Print StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hi there!\"' \u60a8\u8fd8\u53ef\u4ee5\u5c06\u5bf9\u8c61\u56fe\u4f20\u9012\u7ed9\u6b65\u9aa4\u8f93\u5165\uff0c\u800c\u4e0d\u53ea\u662f\u6807\u91cf\u503c \"inputs\": { \"Body\": { \"Value1\": 1, \"Value2\": 2 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, \u5982\u679c\u60a8\u60f3\u8ba1\u7b97\u5bf9\u8c61\u7684\u7ed9\u5b9a\u5c5e\u6027\u7684\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u5728\u53c2\u6570\u524d\u9762\u6dfb\u52a0@\u5e76\u4f20\u9012\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 \"inputs\": { \"Body\": { \"@Value1\": \"data.MyValue * 2\", \"Value2\": 5 }, \"Headers\": { \"Content-Type\": \"application/json\" } },","title":"\u8f93\u5165\u548c\u8f93\u51fa"},{"location":"json-yaml-definitions/#enums","text":"\u5982\u679c\u4f60\u7684\u6b65\u9aa4\u6709\u4e00\u4e2a\u679a\u4e3e\u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u679a\u4e3e\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5b83\u4f1a\u81ea\u52a8\u8f6c\u6362\u3002 \u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u53ef\u7528\u7684\u73af\u5883\u53d8\u91cf \u60a8\u53ef\u4ee5\u4ece\u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u8bbf\u95ee\u73af\u5883\u53d8\u91cf\u3002 \u7528\u6cd5: environment[\"VARIABLE_NAME\"]","title":"\u679a\u4e3e(Enums)"},{"location":"middleware/","text":"\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u5de5\u4f5c\u6d41\u53ef\u4ee5\u901a\u8fc7\u4e2d\u95f4\u4ef6\u8fdb\u884c\u6269\u5c55\uff0c\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb/\u5b8c\u6210\u4e4b\u524d/\u4e4b\u540e\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u56f4\u7ed5\u5de5\u4f5c\u6d41\u6b65\u9aa4\u8fd0\u884c\uff0c\u4ee5\u63d0\u4f9b\u5b9e\u73b0\u6a2a\u5207\u5173\u6ce8\u70b9\u7684\u7075\u6d3b\u6027\uff0c\u5982 log correlation \uff0c retries \u548c\u5176\u4ed6\u7528\u4f8b\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5de5\u4f5c\u6d41\u5b9e\u73b0\u548c\u6ce8\u518c IWorkflowMiddleware \u6216\u4e3a\u6b65\u9aa4\u6ce8\u518c IWorkflowStepMiddleware \u6765\u5b9e\u73b0\u3002 \u6b65\u9aa4\u4e2d\u95f4\u4ef6 \u6b65\u9aa4\u4e2d\u95f4\u4ef6\u5141\u8bb8\u60a8\u56f4\u7ed5\u7ed9\u5b9a\u6b65\u9aa4\u7684\u6267\u884c\u8fd0\u884c\u989d\u5916\u7684\u4ee3\u7801\uff0c\u5e76\u6539\u53d8\u5176\u884c\u4e3a\u3002 \u5bf9\u4e8e\u719f\u6089ASP. net\u7684\u4eba\u6765\u8bf4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u95f4\u4ef6\u5e94\u8be5\u5f88\u719f\u6089\u3002 NET Core\u7684\u4e2d\u95f4\u4ef6\u7ba1\u9053 \u6216 HttpClient\u7684 DelegatingHandler \u4e2d\u95f4\u4ef6 \u3002 \u7528\u6cd5 \u9996\u5148\uff0c\u521b\u5efa\u81ea\u5df1\u7684\u4e2d\u95f4\u4ef6\u7c7b\u6765\u5b9e\u73b0 IWorkflowStepMiddleware \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u4f8b\u5b50\uff0c\u5b83\u5c06\u5de5\u4f5c\u6d41ID\u548c\u6b65\u9aa4ID\u6dfb\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u6b65\u9aa4\u7684\u65e5\u5fd7\u5173\u8054\u4e0a\u4e0b\u6587\u4e2d\u3002 \u91cd\u8981: \u4f60\u5fc5\u987b\u786e\u4fdd\u8c03\u7528 next() \u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u4f60\u7684\u811a\u6b65\u6c38\u8fdc\u4e0d\u4f1a\u8dd1\u3002 public class LogCorrelationStepMiddleware : IWorkflowStepMiddleware { private readonly ILogger<LogCorrelationStepMiddleware> _log; public LogCorrelationStepMiddleware( ILogger<LogCorrelationStepMiddleware> log) { _log = log; } public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next) { var workflowId = context.Workflow.Id; var stepId = context.Step.Id; // Uses log scope to add a few attributes to the scope using (_log.BeginScope(\"{@WorkflowId}\", workflowId)) using (_log.BeginScope(\"{@StepId}\", stepId)) { // Calling next ensures step gets executed return await next(); } } } \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528 Polly dotnet\u5f39\u6027\u5e93\u5728\u57fa\u4e8e\u81ea\u5b9a\u4e49\u91cd\u8bd5\u7b56\u7565\u7684\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e0a\u5b9e\u73b0\u91cd\u8bd5\u3002 public class PollyRetryStepMiddleware : IWorkflowStepMiddleware { private const string StepContextKey = \"WorkflowStepContext\"; private const int MaxRetries = 3; private readonly ILogger<PollyRetryStepMiddleware> _log; public PollyRetryMiddleware(ILogger<PollyRetryStepMiddleware> log) { _log = log; } // Consult Polly's docs for more information on how to build // retry policies: // https://github.com/App-vNext/Polly public IAsyncPolicy<ExecutionResult> GetRetryPolicy() => Policy<ExecutionResult> .Handle<TimeoutException>() .RetryAsync( MaxRetries, (result, retryCount, context) => UpdateRetryCount( result.Exception, retryCount, context[StepContextKey] as IStepExecutionContext) ); public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next ) { return await GetRetryPolicy().ExecuteAsync( ctx => next(), // The step execution context gets passed down so that // the step is accessible within the retry policy new Dictionary<string, object> { { StepContextKey, context } }); } private Task UpdateRetryCount( Exception exception, int retryCount, IStepExecutionContext stepContext) { var stepInstance = stepContext.ExecutionPointer; stepInstance.RetryCount = retryCount; return Task.CompletedTask; } } Pre/Post \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u8981\u4e48\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\uff0c\u8981\u4e48\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u4e4b\u540e\u8fd0\u884c\uff0c\u53ef\u4ee5\u7528\u6765\u6302\u94a9\u5230\u5de5\u4f5c\u6d41\u751f\u547d\u5468\u671f\uff0c\u6216\u8005\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u6539\u53d8\u5b83\u672c\u8eab\u3002 Pre \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\uff0c\u5e76\u4e14\u53ef\u4ee5\u6f5c\u5728\u5730\u6539\u53d8 WorkflowInstance \u4e0a\u7684\u5c5e\u6027\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u6765\u89e3\u91ca\u4f20\u9012\u7684\u5de5\u4f5c\u6d41\u4e0a\u7684\u6570\u636e\uff0c\u6765\u8bbe\u7f6e WorkflowInstance \u4e0a\u7684 Description \u5c5e\u6027\u3002 \u8fd9\u5728\u60a8\u5e0c\u671b\u4ece\u4f20\u9012\u7ed9\u5de5\u4f5c\u6d41\u7684\u6570\u636e\u4e2d\u6d3e\u751f\u5de5\u4f5c\u6d41\u63cf\u8ff0\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4f7f\u7528\u7684\u662f WorkflowMiddlewarePhase.PreWorkflow \u6765\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\u3002 \u91cd\u8981: \u4f60\u5e94\u8be5\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 // AddDescriptionWorkflowMiddleware.cs public class AddDescriptionWorkflowMiddleware : IWorkflowMiddleware { public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PreWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (workflow.Data is IDescriptiveWorkflowParams descriptiveParams) { workflow.Description = descriptiveParams.Description; } return next(); } } // IDescriptiveWorkflowParams.cs public interface IDescriptiveWorkflowParams { string Description { get; } } // MyWorkflowParams.cs public MyWorkflowParams : IDescriptiveWorkflowParams { public string Description => $\"Run task '{TaskName}'\"; public string TaskName { get; set; } } Pre\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406 Pre\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e0e\u5de5\u4f5c\u6d41\u540e\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406\u662f\u4e0d\u540c\u7684\u3002 \u56e0\u4e3a\u4e2d\u95f4\u4ef6\u8fd0\u884c\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\uff0c\u4efb\u4f55\u5728\u9884\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u629b\u51fa\u7684\u5f02\u5e38\u90fd\u4f1a\u88ab StartWorkflow \u65b9\u6cd5\u6240\u89e6\u53d1\uff0c\u800c\u7531 StartWorkflow \u7684\u8c03\u7528\u8005\u6765\u5904\u7406\u5f02\u5e38\u5e76\u91c7\u53d6\u76f8\u5e94\u7684\u884c\u52a8\u3002 public async Task MyMethodThatStartsAWorkflow() { try { await host.StartWorkflow(\"HelloWorld\", 1, null); } catch(Exception ex) { // Handle the exception appropriately } } Post \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\uff0c\u53ef\u4ee5\u7528\u6765\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u5de5\u4f5c\u6d41\u6267\u884c\u989d\u5916\u7684\u64cd\u4f5c\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u5c06\u5de5\u4f5c\u6d41\u6458\u8981\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4f7f\u7528\u7684\u662f WorkflowMiddlewarePhase.PostWorkflow \u6765\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\u3002 \u91cd\u8981: \u4f60\u5e94\u8be5\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 public class PrintWorkflowSummaryMiddleware : IWorkflowMiddleware { private readonly ILogger<PrintWorkflowSummaryMiddleware> _log; public PrintWorkflowSummaryMiddleware( ILogger<PrintWorkflowSummaryMiddleware> log ) { _log = log; } public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PostWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (!workflow.CompleteTime.HasValue) { return next(); } var duration = workflow.CompleteTime.Value - workflow.CreateTime; _log.LogInformation($@\"Workflow {workflow.Description} completed in {duration:g}\"); foreach (var step in workflow.ExecutionPointers) { var stepName = step.StepName; var stepDuration = (step.EndTime - step.StartTime) ?? TimeSpan.Zero; _log.LogInformation($\" - Step {stepName} completed in {stepDuration:g}\"); } return next(); } } Post\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406 Post\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e0epre\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406\u4e0d\u540c\u3002 \u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u65f6\uff0c\u60a8\u7684\u5de5\u4f5c\u6d41\u5df2\u7ecf\u8fd0\u884c\u4e86\uff0c\u56e0\u6b64\u5f88\u96be\u5904\u7406\u672a\u6355\u83b7\u7684\u5f02\u5e38\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u5b83\u5c06\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u5de5\u4f5c\u6d41\u5c06\u6b63\u5e38\u5b8c\u6210\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u884c\u4e3a\u53ef\u4ee5\u6539\u53d8\u3002 \u8981\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709\u5de5\u4f5c\u6d41\u7684\u9ed8\u8ba4\u540e\u5de5\u4f5c\u6d41\u9519\u8bef\u5904\u7406\uff0c\u53ea\u9700\u5728\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u4e2d\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684 IWorkflowMiddlewareErrorHandler \uff0c\u5176\u81ea\u5b9a\u4e49\u884c\u4e3a\u5982\u4e0b\u3002 // CustomMiddlewareErrorHandler.cs public class CustomHandler : IWorkflowMiddlewareErrorHandler { public Task HandleAsync(Exception ex) { // Handle your error asynchronously } } // Startup.cs public void ConfigureServices(IServiceCollection services) { // Other workflow configuration services.AddWorkflow(); // Should go after .AddWorkflow() services.AddTransient<IWorkflowMiddlewareErrorHandler, CustomHandler>(); } \u6ce8\u518c\u4e2d\u95f4\u4ef6 \u4e3a\u4e86\u8ba9\u4e2d\u95f4\u4ef6\u751f\u6548\uff0c\u5b83\u4eec\u5fc5\u987b\u4f7f\u7528\u4fbf\u5229\u7684\u5e2e\u52a9\u7a0b\u5e8f\u5728\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u4e2d\u6ce8\u518c\u3002 \u6ce8\u610f: \u4e2d\u95f4\u4ef6\u7684\u8fd0\u884c\u987a\u5e8f\u662f:\u5148\u6ce8\u518c\u7684\u4e2d\u95f4\u4ef6\u5728\u94fe\u4e2d\u8fd0\u884c\u5f97\u8f83\u65e9\uff0c\u7136\u540e\u5728\u94fe\u4e2d\u5b8c\u6210\u5f97\u8f83\u665a\u3002 \u5bf9\u4e8e\u9884/\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\uff0c\u6240\u6709\u7684\u9884\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\uff0c\u6240\u6709\u7684\u540e\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u4e4b\u540e\u8fd0\u884c\u3002 public class Startup { public void ConfigureServices(IServiceCollection services) { ... // Add workflow middleware services.AddWorkflowMiddleware<AddDescriptionWorkflowMiddleware>(); services.AddWorkflowMiddleware<PrintWorkflowSummaryMiddleware>(); // Add step middleware services.AddWorkflowStepMiddleware<LogCorrelationStepMiddleware>(); services.AddWorkflowStepMiddleware<PollyRetryMiddleware>(); ... } } \u66f4\u591a\u4fe1\u606f \u8bf7\u53c2\u9605 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u7684\u793a\u4f8b\uff0c\u4ee5\u83b7\u5f97\u5de5\u4f5c\u4e2d\u7684\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5b8c\u6574\u793a\u4f8b\u3002","title":"\u4e2d\u95f4\u4ef6"},{"location":"middleware/#_1","text":"\u5de5\u4f5c\u6d41\u53ef\u4ee5\u901a\u8fc7\u4e2d\u95f4\u4ef6\u8fdb\u884c\u6269\u5c55\uff0c\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb/\u5b8c\u6210\u4e4b\u524d/\u4e4b\u540e\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u56f4\u7ed5\u5de5\u4f5c\u6d41\u6b65\u9aa4\u8fd0\u884c\uff0c\u4ee5\u63d0\u4f9b\u5b9e\u73b0\u6a2a\u5207\u5173\u6ce8\u70b9\u7684\u7075\u6d3b\u6027\uff0c\u5982 log correlation \uff0c retries \u548c\u5176\u4ed6\u7528\u4f8b\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5de5\u4f5c\u6d41\u5b9e\u73b0\u548c\u6ce8\u518c IWorkflowMiddleware \u6216\u4e3a\u6b65\u9aa4\u6ce8\u518c IWorkflowStepMiddleware \u6765\u5b9e\u73b0\u3002","title":"\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"middleware/#_2","text":"\u6b65\u9aa4\u4e2d\u95f4\u4ef6\u5141\u8bb8\u60a8\u56f4\u7ed5\u7ed9\u5b9a\u6b65\u9aa4\u7684\u6267\u884c\u8fd0\u884c\u989d\u5916\u7684\u4ee3\u7801\uff0c\u5e76\u6539\u53d8\u5176\u884c\u4e3a\u3002 \u5bf9\u4e8e\u719f\u6089ASP. net\u7684\u4eba\u6765\u8bf4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u95f4\u4ef6\u5e94\u8be5\u5f88\u719f\u6089\u3002 NET Core\u7684\u4e2d\u95f4\u4ef6\u7ba1\u9053 \u6216 HttpClient\u7684 DelegatingHandler \u4e2d\u95f4\u4ef6 \u3002","title":"\u6b65\u9aa4\u4e2d\u95f4\u4ef6"},{"location":"middleware/#_3","text":"\u9996\u5148\uff0c\u521b\u5efa\u81ea\u5df1\u7684\u4e2d\u95f4\u4ef6\u7c7b\u6765\u5b9e\u73b0 IWorkflowStepMiddleware \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u4f8b\u5b50\uff0c\u5b83\u5c06\u5de5\u4f5c\u6d41ID\u548c\u6b65\u9aa4ID\u6dfb\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u6b65\u9aa4\u7684\u65e5\u5fd7\u5173\u8054\u4e0a\u4e0b\u6587\u4e2d\u3002 \u91cd\u8981: \u4f60\u5fc5\u987b\u786e\u4fdd\u8c03\u7528 next() \u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u4f60\u7684\u811a\u6b65\u6c38\u8fdc\u4e0d\u4f1a\u8dd1\u3002 public class LogCorrelationStepMiddleware : IWorkflowStepMiddleware { private readonly ILogger<LogCorrelationStepMiddleware> _log; public LogCorrelationStepMiddleware( ILogger<LogCorrelationStepMiddleware> log) { _log = log; } public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next) { var workflowId = context.Workflow.Id; var stepId = context.Step.Id; // Uses log scope to add a few attributes to the scope using (_log.BeginScope(\"{@WorkflowId}\", workflowId)) using (_log.BeginScope(\"{@StepId}\", stepId)) { // Calling next ensures step gets executed return await next(); } } } \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528 Polly dotnet\u5f39\u6027\u5e93\u5728\u57fa\u4e8e\u81ea\u5b9a\u4e49\u91cd\u8bd5\u7b56\u7565\u7684\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e0a\u5b9e\u73b0\u91cd\u8bd5\u3002 public class PollyRetryStepMiddleware : IWorkflowStepMiddleware { private const string StepContextKey = \"WorkflowStepContext\"; private const int MaxRetries = 3; private readonly ILogger<PollyRetryStepMiddleware> _log; public PollyRetryMiddleware(ILogger<PollyRetryStepMiddleware> log) { _log = log; } // Consult Polly's docs for more information on how to build // retry policies: // https://github.com/App-vNext/Polly public IAsyncPolicy<ExecutionResult> GetRetryPolicy() => Policy<ExecutionResult> .Handle<TimeoutException>() .RetryAsync( MaxRetries, (result, retryCount, context) => UpdateRetryCount( result.Exception, retryCount, context[StepContextKey] as IStepExecutionContext) ); public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next ) { return await GetRetryPolicy().ExecuteAsync( ctx => next(), // The step execution context gets passed down so that // the step is accessible within the retry policy new Dictionary<string, object> { { StepContextKey, context } }); } private Task UpdateRetryCount( Exception exception, int retryCount, IStepExecutionContext stepContext) { var stepInstance = stepContext.ExecutionPointer; stepInstance.RetryCount = retryCount; return Task.CompletedTask; } }","title":"\u7528\u6cd5"},{"location":"middleware/#prepost","text":"\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u8981\u4e48\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\uff0c\u8981\u4e48\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u4e4b\u540e\u8fd0\u884c\uff0c\u53ef\u4ee5\u7528\u6765\u6302\u94a9\u5230\u5de5\u4f5c\u6d41\u751f\u547d\u5468\u671f\uff0c\u6216\u8005\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u6539\u53d8\u5b83\u672c\u8eab\u3002","title":"Pre/Post \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"middleware/#pre","text":"\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\uff0c\u5e76\u4e14\u53ef\u4ee5\u6f5c\u5728\u5730\u6539\u53d8 WorkflowInstance \u4e0a\u7684\u5c5e\u6027\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u6765\u89e3\u91ca\u4f20\u9012\u7684\u5de5\u4f5c\u6d41\u4e0a\u7684\u6570\u636e\uff0c\u6765\u8bbe\u7f6e WorkflowInstance \u4e0a\u7684 Description \u5c5e\u6027\u3002 \u8fd9\u5728\u60a8\u5e0c\u671b\u4ece\u4f20\u9012\u7ed9\u5de5\u4f5c\u6d41\u7684\u6570\u636e\u4e2d\u6d3e\u751f\u5de5\u4f5c\u6d41\u63cf\u8ff0\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4f7f\u7528\u7684\u662f WorkflowMiddlewarePhase.PreWorkflow \u6765\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\u3002 \u91cd\u8981: \u4f60\u5e94\u8be5\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 // AddDescriptionWorkflowMiddleware.cs public class AddDescriptionWorkflowMiddleware : IWorkflowMiddleware { public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PreWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (workflow.Data is IDescriptiveWorkflowParams descriptiveParams) { workflow.Description = descriptiveParams.Description; } return next(); } } // IDescriptiveWorkflowParams.cs public interface IDescriptiveWorkflowParams { string Description { get; } } // MyWorkflowParams.cs public MyWorkflowParams : IDescriptiveWorkflowParams { public string Description => $\"Run task '{TaskName}'\"; public string TaskName { get; set; } }","title":"Pre \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"middleware/#pre_1","text":"Pre\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e0e\u5de5\u4f5c\u6d41\u540e\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406\u662f\u4e0d\u540c\u7684\u3002 \u56e0\u4e3a\u4e2d\u95f4\u4ef6\u8fd0\u884c\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\uff0c\u4efb\u4f55\u5728\u9884\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u629b\u51fa\u7684\u5f02\u5e38\u90fd\u4f1a\u88ab StartWorkflow \u65b9\u6cd5\u6240\u89e6\u53d1\uff0c\u800c\u7531 StartWorkflow \u7684\u8c03\u7528\u8005\u6765\u5904\u7406\u5f02\u5e38\u5e76\u91c7\u53d6\u76f8\u5e94\u7684\u884c\u52a8\u3002 public async Task MyMethodThatStartsAWorkflow() { try { await host.StartWorkflow(\"HelloWorld\", 1, null); } catch(Exception ex) { // Handle the exception appropriately } }","title":"Pre\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406"},{"location":"middleware/#post","text":"\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\uff0c\u53ef\u4ee5\u7528\u6765\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u5de5\u4f5c\u6d41\u6267\u884c\u989d\u5916\u7684\u64cd\u4f5c\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u5c06\u5de5\u4f5c\u6d41\u6458\u8981\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4f7f\u7528\u7684\u662f WorkflowMiddlewarePhase.PostWorkflow \u6765\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\u3002 \u91cd\u8981: \u4f60\u5e94\u8be5\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 public class PrintWorkflowSummaryMiddleware : IWorkflowMiddleware { private readonly ILogger<PrintWorkflowSummaryMiddleware> _log; public PrintWorkflowSummaryMiddleware( ILogger<PrintWorkflowSummaryMiddleware> log ) { _log = log; } public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PostWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (!workflow.CompleteTime.HasValue) { return next(); } var duration = workflow.CompleteTime.Value - workflow.CreateTime; _log.LogInformation($@\"Workflow {workflow.Description} completed in {duration:g}\"); foreach (var step in workflow.ExecutionPointers) { var stepName = step.StepName; var stepDuration = (step.EndTime - step.StartTime) ?? TimeSpan.Zero; _log.LogInformation($\" - Step {stepName} completed in {stepDuration:g}\"); } return next(); } }","title":"Post \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"middleware/#post_1","text":"Post\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e0epre\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406\u4e0d\u540c\u3002 \u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u65f6\uff0c\u60a8\u7684\u5de5\u4f5c\u6d41\u5df2\u7ecf\u8fd0\u884c\u4e86\uff0c\u56e0\u6b64\u5f88\u96be\u5904\u7406\u672a\u6355\u83b7\u7684\u5f02\u5e38\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u5b83\u5c06\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u5e76\u4e14\u5de5\u4f5c\u6d41\u5c06\u6b63\u5e38\u5b8c\u6210\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u884c\u4e3a\u53ef\u4ee5\u6539\u53d8\u3002 \u8981\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709\u5de5\u4f5c\u6d41\u7684\u9ed8\u8ba4\u540e\u5de5\u4f5c\u6d41\u9519\u8bef\u5904\u7406\uff0c\u53ea\u9700\u5728\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u4e2d\u6ce8\u518c\u4e00\u4e2a\u65b0\u7684 IWorkflowMiddlewareErrorHandler \uff0c\u5176\u81ea\u5b9a\u4e49\u884c\u4e3a\u5982\u4e0b\u3002 // CustomMiddlewareErrorHandler.cs public class CustomHandler : IWorkflowMiddlewareErrorHandler { public Task HandleAsync(Exception ex) { // Handle your error asynchronously } } // Startup.cs public void ConfigureServices(IServiceCollection services) { // Other workflow configuration services.AddWorkflow(); // Should go after .AddWorkflow() services.AddTransient<IWorkflowMiddlewareErrorHandler, CustomHandler>(); }","title":"Post\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u5904\u7406"},{"location":"middleware/#_4","text":"\u4e3a\u4e86\u8ba9\u4e2d\u95f4\u4ef6\u751f\u6548\uff0c\u5b83\u4eec\u5fc5\u987b\u4f7f\u7528\u4fbf\u5229\u7684\u5e2e\u52a9\u7a0b\u5e8f\u5728\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u4e2d\u6ce8\u518c\u3002 \u6ce8\u610f: \u4e2d\u95f4\u4ef6\u7684\u8fd0\u884c\u987a\u5e8f\u662f:\u5148\u6ce8\u518c\u7684\u4e2d\u95f4\u4ef6\u5728\u94fe\u4e2d\u8fd0\u884c\u5f97\u8f83\u65e9\uff0c\u7136\u540e\u5728\u94fe\u4e2d\u5b8c\u6210\u5f97\u8f83\u665a\u3002 \u5bf9\u4e8e\u9884/\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\uff0c\u6240\u6709\u7684\u9884\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\uff0c\u6240\u6709\u7684\u540e\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u4e4b\u540e\u8fd0\u884c\u3002 public class Startup { public void ConfigureServices(IServiceCollection services) { ... // Add workflow middleware services.AddWorkflowMiddleware<AddDescriptionWorkflowMiddleware>(); services.AddWorkflowMiddleware<PrintWorkflowSummaryMiddleware>(); // Add step middleware services.AddWorkflowStepMiddleware<LogCorrelationStepMiddleware>(); services.AddWorkflowStepMiddleware<PollyRetryMiddleware>(); ... } }","title":"\u6ce8\u518c\u4e2d\u95f4\u4ef6"},{"location":"middleware/#_5","text":"\u8bf7\u53c2\u9605 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u7684\u793a\u4f8b\uff0c\u4ee5\u83b7\u5f97\u5de5\u4f5c\u4e2d\u7684\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5b8c\u6574\u793a\u4f8b\u3002","title":"\u66f4\u591a\u4fe1\u606f"},{"location":"multi-node-clusters/","text":"\u591a\u8282\u70b9\u96c6\u7fa4 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cWorkflowHost\u670d\u52a1\u5c06\u4f5c\u4e3a\u5355\u4e2a\u8282\u70b9\u8fd0\u884c\uff0c\u4f7f\u7528\u9488\u5bf9\u5355\u4e2a\u8282\u70b9\u914d\u7f6e\u7684\u5185\u7f6e\u961f\u5217\u548c\u9501\u5b9a\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u8fd0\u884c\u4e00\u4e2a\u591a\u8282\u70b9\u96c6\u7fa4\uff0c\u60a8\u5c06\u9700\u8981\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u6392\u961f\u673a\u5236\u548c\u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668\u6765\u534f\u8c03\u96c6\u7fa4\u3002 \u8fd9\u4e9b\u662f\u5f53\u524d\u53ef\u7528\u7684\u63d0\u4f9b\u8005\u3002 \u961f\u5217\u63d0\u4f9b\u8005 SingleNodeQueueProvider (\u9ed8\u8ba4\u5185\u7f6e\u63d0\u4f9b\u8005) Azure Storage Queues Redis RabbitMQ AWS Simple Queue Service \u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668Distributed lock managers SingleNodeLockProvider (Default built-in provider) Azure Storage Leases Redis AWS DynamoDB","title":"\u591a\u8282\u70b9\u96c6\u7fa4"},{"location":"multi-node-clusters/#_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cWorkflowHost\u670d\u52a1\u5c06\u4f5c\u4e3a\u5355\u4e2a\u8282\u70b9\u8fd0\u884c\uff0c\u4f7f\u7528\u9488\u5bf9\u5355\u4e2a\u8282\u70b9\u914d\u7f6e\u7684\u5185\u7f6e\u961f\u5217\u548c\u9501\u5b9a\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u8fd0\u884c\u4e00\u4e2a\u591a\u8282\u70b9\u96c6\u7fa4\uff0c\u60a8\u5c06\u9700\u8981\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u6392\u961f\u673a\u5236\u548c\u4e00\u4e2a\u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668\u6765\u534f\u8c03\u96c6\u7fa4\u3002 \u8fd9\u4e9b\u662f\u5f53\u524d\u53ef\u7528\u7684\u63d0\u4f9b\u8005\u3002","title":"\u591a\u8282\u70b9\u96c6\u7fa4"},{"location":"multi-node-clusters/#_2","text":"SingleNodeQueueProvider (\u9ed8\u8ba4\u5185\u7f6e\u63d0\u4f9b\u8005) Azure Storage Queues Redis RabbitMQ AWS Simple Queue Service","title":"\u961f\u5217\u63d0\u4f9b\u8005"},{"location":"multi-node-clusters/#distributed-lock-managers","text":"SingleNodeLockProvider (Default built-in provider) Azure Storage Leases Redis AWS DynamoDB","title":"\u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668Distributed lock managers"},{"location":"persistence/","text":"\u6301\u4e45\u5316 \u7531\u4e8e\u5de5\u4f5c\u6d41\u901a\u5e38\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u6d41\u7a0b\uff0c\u56e0\u6b64\u9700\u8981\u5728\u6b65\u9aa4\u4e4b\u95f4\u6301\u4e45\u5316\u5b58\u50a8\u3002 \u6709\u51e0\u4e2a\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u4e3a\u5355\u72ec\u7684Nuget\u5305\u4f7f\u7528\u3002 MemoryPersistenceProvider (\u5bf9\u4e8e\u6f14\u793a\u548c\u6d4b\u8bd5\u76ee\u7684\uff0c\u8fd9\u662f\u9ed8\u8ba4\u7684\u63d0\u4f9b\u7a0b\u5e8f) MongoDB SQL Server PostgreSQL Sqlite Amazon DynamoDB Cosmos DB Redis","title":"\u6301\u4e45\u5316"},{"location":"persistence/#_1","text":"\u7531\u4e8e\u5de5\u4f5c\u6d41\u901a\u5e38\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u6d41\u7a0b\uff0c\u56e0\u6b64\u9700\u8981\u5728\u6b65\u9aa4\u4e4b\u95f4\u6301\u4e45\u5316\u5b58\u50a8\u3002 \u6709\u51e0\u4e2a\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u4e3a\u5355\u72ec\u7684Nuget\u5305\u4f7f\u7528\u3002 MemoryPersistenceProvider (\u5bf9\u4e8e\u6f14\u793a\u548c\u6d4b\u8bd5\u76ee\u7684\uff0c\u8fd9\u662f\u9ed8\u8ba4\u7684\u63d0\u4f9b\u7a0b\u5e8f) MongoDB SQL Server PostgreSQL Sqlite Amazon DynamoDB Cosmos DB Redis","title":"\u6301\u4e45\u5316"},{"location":"saga-transactions/","text":"\u5e26\u6709\u8865\u507f\u7684sages\u4e8b\u52a1(Saga transaction with compensation) Saga\u5141\u8bb8\u60a8\u5728\u4e00\u4e2aSaga\u4e8b\u52a1\u4e2d\u5c01\u88c5\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6b65\u9aa4\u6307\u5b9a\u8865\u507f\u6b65\u9aa4\u3002 \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c Task2 \u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u89e6\u53d1 UndoTask2 \u548c UndoTask1 \u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .CompensateWith<CleanUp>() .Then(context => Console.WriteLine(\"End\")); \u5bf9\u4e8e\u5931\u8d25\u7684saga\u4e8b\u52a1\u7684\u91cd\u8bd5\u7b56\u7565(Retry policy for failed saga transaction) \u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u5c06\u6bcf5\u79d2\u91cd\u65b0\u5c1d\u8bd5saga\uff0c\u4f46\u60a8\u4e5f\u53ef\u80fd\u5b8c\u5168\u5931\u8d25\uff0c\u5e76\u5904\u7406\u6574\u4e2asaga\u7684\u4e3b\u8865\u507f\u4efb\u52a1\u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .OnError(Models.WorkflowErrorHandling.Retry, TimeSpan.FromSeconds(5)) .Then(context => Console.WriteLine(\"End\")); \u8865\u507f\u6574\u4e2asaga\u4e8b\u52a1(Compensate entire saga transaction) \u60a8\u4e5f\u53ef\u4ee5\u53ea\u6307\u5b9a\u4e00\u4e2a\u4e3b\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .Then<Task2>() .Then<Task3>() ) .CompensateWith<UndoEverything>() .Then(context => Console.WriteLine(\"End\")); \u4f20\u9012\u53c2\u6570\u7ed9\u8865\u507f\u6b65\u9aa4(Passing parameters to compensation steps) \u53c2\u6570\u53ef\u4ee5\u4f20\u9012\u5230\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith<SayHello>() .CompensateWith<PrintMessage>(compensate => { compensate.Input(step => step.Message, data => \"undoing...\"); }) Expressing a saga in JSON or YAML \u901a\u8fc7\u4f7f\u7528 WorkflowCore.Primitives.Sequence \u6b65\u9aa4\u5e76\u5c06saga\u53c2\u6570\u8bbe\u7f6e\u4e3atrue, saga\u4e8b\u52a1\u53ef\u4ee5\u7528JSON\u6216YAML\u8868\u793a\u3002 \u8865\u507f\u6b65\u9aa4\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a CompensateWith \u53c2\u6570\u6765\u5b9a\u4e49\u3002 { \"Id\": \"Saga-Sample\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"MySaga\" }, { \"Id\": \"MySaga\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"Bye\", \"Saga\": true, \"Do\": [ [ { \"Id\": \"do1\", \"StepType\": \"MyApp.Task1, MyApp\", \"NextStepId\": \"do2\", \"CompensateWith\": [ { \"Id\": \"undo1\", \"StepType\": \"MyApp.UndoTask1, MyApp\" } ] }, { \"Id\": \"do2\", \"StepType\": \"MyApp.Task2, MyApp\", \"CompensateWith\": [ { \"Id\": \"undo2-1\", \"NextStepId\": \"undo2-2\", \"StepType\": \"MyApp.UndoTask2, MyApp\" }, { \"Id\": \"undo2-2\", \"StepType\": \"MyApp.DoSomethingElse, MyApp\" } ] } ] ] }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: Saga-Sample Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: MySaga - Id: MySaga StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: Bye Saga: true Do: - - Id: do1 StepType: MyApp.Task1, MyApp NextStepId: do2 CompensateWith: - Id: undo1 StepType: MyApp.UndoTask1, MyApp - Id: do2 StepType: MyApp.Task2, MyApp CompensateWith: - Id: undo2-1 NextStepId: undo2-2 StepType: MyApp.UndoTask2, MyApp - Id: undo2-2 StepType: MyApp.DoSomethingElse, MyApp - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"saga\u4e8b\u52a1"},{"location":"saga-transactions/#sagessaga-transaction-with-compensation","text":"Saga\u5141\u8bb8\u60a8\u5728\u4e00\u4e2aSaga\u4e8b\u52a1\u4e2d\u5c01\u88c5\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6b65\u9aa4\u6307\u5b9a\u8865\u507f\u6b65\u9aa4\u3002 \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c Task2 \u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u89e6\u53d1 UndoTask2 \u548c UndoTask1 \u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .CompensateWith<CleanUp>() .Then(context => Console.WriteLine(\"End\"));","title":"\u5e26\u6709\u8865\u507f\u7684sages\u4e8b\u52a1(Saga transaction with compensation)"},{"location":"saga-transactions/#sagaretry-policy-for-failed-saga-transaction","text":"\u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u5c06\u6bcf5\u79d2\u91cd\u65b0\u5c1d\u8bd5saga\uff0c\u4f46\u60a8\u4e5f\u53ef\u80fd\u5b8c\u5168\u5931\u8d25\uff0c\u5e76\u5904\u7406\u6574\u4e2asaga\u7684\u4e3b\u8865\u507f\u4efb\u52a1\u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .OnError(Models.WorkflowErrorHandling.Retry, TimeSpan.FromSeconds(5)) .Then(context => Console.WriteLine(\"End\"));","title":"\u5bf9\u4e8e\u5931\u8d25\u7684saga\u4e8b\u52a1\u7684\u91cd\u8bd5\u7b56\u7565(Retry policy for failed saga transaction)"},{"location":"saga-transactions/#sagacompensate-entire-saga-transaction","text":"\u60a8\u4e5f\u53ef\u4ee5\u53ea\u6307\u5b9a\u4e00\u4e2a\u4e3b\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .Then<Task2>() .Then<Task3>() ) .CompensateWith<UndoEverything>() .Then(context => Console.WriteLine(\"End\"));","title":"\u8865\u507f\u6574\u4e2asaga\u4e8b\u52a1(Compensate entire saga transaction)"},{"location":"saga-transactions/#passing-parameters-to-compensation-steps","text":"\u53c2\u6570\u53ef\u4ee5\u4f20\u9012\u5230\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith<SayHello>() .CompensateWith<PrintMessage>(compensate => { compensate.Input(step => step.Message, data => \"undoing...\"); })","title":"\u4f20\u9012\u53c2\u6570\u7ed9\u8865\u507f\u6b65\u9aa4(Passing parameters to compensation steps)"},{"location":"saga-transactions/#expressing-a-saga-in-json-or-yaml","text":"\u901a\u8fc7\u4f7f\u7528 WorkflowCore.Primitives.Sequence \u6b65\u9aa4\u5e76\u5c06saga\u53c2\u6570\u8bbe\u7f6e\u4e3atrue, saga\u4e8b\u52a1\u53ef\u4ee5\u7528JSON\u6216YAML\u8868\u793a\u3002 \u8865\u507f\u6b65\u9aa4\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a CompensateWith \u53c2\u6570\u6765\u5b9a\u4e49\u3002 { \"Id\": \"Saga-Sample\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"MySaga\" }, { \"Id\": \"MySaga\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"Bye\", \"Saga\": true, \"Do\": [ [ { \"Id\": \"do1\", \"StepType\": \"MyApp.Task1, MyApp\", \"NextStepId\": \"do2\", \"CompensateWith\": [ { \"Id\": \"undo1\", \"StepType\": \"MyApp.UndoTask1, MyApp\" } ] }, { \"Id\": \"do2\", \"StepType\": \"MyApp.Task2, MyApp\", \"CompensateWith\": [ { \"Id\": \"undo2-1\", \"NextStepId\": \"undo2-2\", \"StepType\": \"MyApp.UndoTask2, MyApp\" }, { \"Id\": \"undo2-2\", \"StepType\": \"MyApp.DoSomethingElse, MyApp\" } ] } ] ] }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: Saga-Sample Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: MySaga - Id: MySaga StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: Bye Saga: true Do: - - Id: do1 StepType: MyApp.Task1, MyApp NextStepId: do2 CompensateWith: - Id: undo1 StepType: MyApp.UndoTask1, MyApp - Id: do2 StepType: MyApp.Task2, MyApp CompensateWith: - Id: undo2-1 NextStepId: undo2-2 StepType: MyApp.UndoTask2, MyApp - Id: undo2-2 StepType: MyApp.DoSomethingElse, MyApp - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"Expressing a saga in JSON or YAML"},{"location":"test-helpers/","text":"Workflow Core\u7684\u6d4b\u8bd5\u52a9\u624b Provides support writing tests for workflows built on WorkflowCore \u5b89\u88c5 \u5b89\u88c5 NuGet \u5305\"WorkflowCore.Testing\" PM> Install-Package WorkflowCore.Testing \u7528\u6cd5 \u4f7f\u7528xUnit Create a class that inherits from WorkflowTest Call the Setup() method in the constructor Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors public class xUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { public xUnitTest() { Setup(); } [Fact] public void MyWorkflow() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } } \u4f7f\u7528NUnit Create a class that inherits from WorkflowTest and decorate it with the TestFixture attribute Override the Setup method and decorate it with the SetUp attribute Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors [TestFixture] public class NUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { [SetUp] protected override void Setup() { base.Setup(); } [Test] public void NUnit_workflow_test_sample() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"\u6d4b\u8bd5\u52a9\u624b"},{"location":"test-helpers/#workflow-core","text":"Provides support writing tests for workflows built on WorkflowCore","title":"Workflow Core\u7684\u6d4b\u8bd5\u52a9\u624b"},{"location":"test-helpers/#_1","text":"\u5b89\u88c5 NuGet \u5305\"WorkflowCore.Testing\" PM> Install-Package WorkflowCore.Testing","title":"\u5b89\u88c5"},{"location":"test-helpers/#_2","text":"","title":"\u7528\u6cd5"},{"location":"test-helpers/#xunit","text":"Create a class that inherits from WorkflowTest Call the Setup() method in the constructor Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors public class xUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { public xUnitTest() { Setup(); } [Fact] public void MyWorkflow() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"\u4f7f\u7528xUnit"},{"location":"test-helpers/#nunit","text":"Create a class that inherits from WorkflowTest and decorate it with the TestFixture attribute Override the Setup method and decorate it with the SetUp attribute Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors [TestFixture] public class NUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { [SetUp] protected override void Setup() { base.Setup(); } [Test] public void NUnit_workflow_test_sample() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"\u4f7f\u7528NUnit"}]}